{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE PatternSynonyms #-}
{-# LANGUAGE ViewPatterns #-}

module Text.Texpr.Bootstrap
  ( peg
  , grammar
  , clean
  , parsePeg
  ) where

import Data.Char (chr)
import Data.List (partition,uncons)
import Data.Map (Map)
import Data.Texpr (Texpr(..),Texprs)
import Text.Location (Position(..),Range(..),FwdRange,toFwd,fromFwd)
import Text.Texpr.Compile (compile)
import Text.Texpr.Define (Peg(..),Rule(..),SatClass(..),CharClass(..))

import qualified Text.Texpr.Tree as Tree

------ Generated Base Grammar  ------

grammar :: (Map String ([String], Tree.Rule), Tree.Rule)
grammar = case compile peg of
  Right g -> g
  Left e -> errorWithoutStackTrace $ "internal Tbnf error: " ++ show e

pattern Fwd :: Range -> FwdRange
pattern Fwd r <- (fromFwd -> r)
  where
  Fwd = toFwd

peg :: Peg
peg = Peg {start = Nothing, rules = [(Fwd (Range {anchor = Pos {nChars = 1496, line = 31, col = 3}, position = Pos {nChars = 1525, line = 31, col = 32}}),(Fwd (Range {anchor = Pos {nChars = 1496, line = 31, col = 3}, position = Pos {nChars = 1504, line = 31, col = 11}}),"birdFoot",[]),Ctor (Fwd (Range {anchor = Pos {nChars = 1507, line = 31, col = 14}, position = Pos {nChars = 1516, line = 31, col = 23}})) "bird-foot" (Seq (Fwd (Range {anchor = Pos {nChars = 1518, line = 31, col = 25}, position = Pos {nChars = 1525, line = 31, col = 32}})) [Char (Fwd (Range {anchor = Pos {nChars = 1518, line = 31, col = 25}, position = Pos {nChars = 1521, line = 31, col = 28}})) '>',Char (Fwd (Range {anchor = Pos {nChars = 1522, line = 31, col = 29}, position = Pos {nChars = 1525, line = 31, col = 32}})) ' '])),(Fwd (Range {anchor = Pos {nChars = 1528, line = 32, col = 3}, position = Pos {nChars = 1666, line = 35, col = 6}}),(Fwd (Range {anchor = Pos {nChars = 1528, line = 32, col = 3}, position = Pos {nChars = 1536, line = 32, col = 11}}),"doc.line",[]),Ctor (Fwd (Range {anchor = Pos {nChars = 1539, line = 32, col = 14}, position = Pos {nChars = 1542, line = 32, col = 17}})) "doc" (Flat (Fwd (Range {anchor = Pos {nChars = 1548, line = 33, col = 5}, position = Pos {nChars = 1666, line = 35, col = 6}})) (Seq (Fwd (Range {anchor = Pos {nChars = 1550, line = 33, col = 7}, position = Pos {nChars = 1624, line = 34, col = 18}})) [SatNeg (Fwd (Range {anchor = Pos {nChars = 1550, line = 33, col = 7}, position = Pos {nChars = 1560, line = 33, col = 17}})) [SatSet (Fwd (Range {anchor = Pos {nChars = 1553, line = 33, col = 10}, position = Pos {nChars = 1554, line = 33, col = 11}})) ">",SatChar (Fwd (Range {anchor = Pos {nChars = 1554, line = 33, col = 11}, position = Pos {nChars = 1558, line = 33, col = 15}})) '\n'],Rep (Fwd (Range {anchor = Pos {nChars = 1613, line = 34, col = 7}, position = Pos {nChars = 1624, line = 34, col = 18}})) (SatNeg (Fwd (Range {anchor = Pos {nChars = 1613, line = 34, col = 7}, position = Pos {nChars = 1623, line = 34, col = 17}})) [SatChar (Fwd (Range {anchor = Pos {nChars = 1616, line = 34, col = 10}, position = Pos {nChars = 1620, line = 34, col = 14}})) '\n']) (0,Nothing)]))),(Fwd (Range {anchor = Pos {nChars = 1671, line = 37, col = 3}, position = Pos {nChars = 1697, line = 37, col = 29}}),(Fwd (Range {anchor = Pos {nChars = 1671, line = 37, col = 3}, position = Pos {nChars = 1674, line = 37, col = 6}}),"Doc",[]),Rep (Fwd (Range {anchor = Pos {nChars = 1677, line = 37, col = 9}, position = Pos {nChars = 1697, line = 37, col = 29}})) (Alt (Fwd (Range {anchor = Pos {nChars = 1678, line = 37, col = 10}, position = Pos {nChars = 1695, line = 37, col = 27}})) [Seq (Fwd (Range {anchor = Pos {nChars = 1678, line = 37, col = 10}, position = Pos {nChars = 1690, line = 37, col = 22}})) [Call (Fwd (Range {anchor = Pos {nChars = 1678, line = 37, col = 10}, position = Pos {nChars = 1686, line = 37, col = 18}})) "doc.line" [],Rep (Fwd (Range {anchor = Pos {nChars = 1687, line = 37, col = 19}, position = Pos {nChars = 1690, line = 37, col = 22}})) (Call (Fwd (Range {anchor = Pos {nChars = 1687, line = 37, col = 19}, position = Pos {nChars = 1689, line = 37, col = 21}})) "nl" []) (0,Just 1)],Call (Fwd (Range {anchor = Pos {nChars = 1693, line = 37, col = 25}, position = Pos {nChars = 1695, line = 37, col = 27}})) "nl" []]) (1,Nothing)),(Fwd (Range {anchor = Pos {nChars = 2157, line = 45, col = 3}, position = Pos {nChars = 2171, line = 45, col = 17}}),(Fwd (Range {anchor = Pos {nChars = 2157, line = 45, col = 3}, position = Pos {nChars = 2162, line = 45, col = 8}}),"start",[]),Seq (Fwd (Range {anchor = Pos {nChars = 2165, line = 45, col = 11}, position = Pos {nChars = 2171, line = 45, col = 17}})) [Rep (Fwd (Range {anchor = Pos {nChars = 2165, line = 45, col = 11}, position = Pos {nChars = 2169, line = 45, col = 15}})) (Call (Fwd (Range {anchor = Pos {nChars = 2165, line = 45, col = 11}, position = Pos {nChars = 2168, line = 45, col = 14}})) "top" []) (0,Nothing),End (Fwd (Range {anchor = Pos {nChars = 2170, line = 45, col = 16}, position = Pos {nChars = 2171, line = 45, col = 17}}))]),(Fwd (Range {anchor = Pos {nChars = 2176, line = 47, col = 3}, position = Pos {nChars = 2232, line = 50, col = 10}}),(Fwd (Range {anchor = Pos {nChars = 2176, line = 47, col = 3}, position = Pos {nChars = 2179, line = 47, col = 6}}),"top",[]),Alt (Fwd (Range {anchor = Pos {nChars = 2186, line = 48, col = 7}, position = Pos {nChars = 2232, line = 50, col = 10}})) [Call (Fwd (Range {anchor = Pos {nChars = 2186, line = 48, col = 7}, position = Pos {nChars = 2189, line = 48, col = 10}})) "Doc" [],Seq (Fwd (Range {anchor = Pos {nChars = 2196, line = 49, col = 7}, position = Pos {nChars = 2222, line = 49, col = 33}})) [Call (Fwd (Range {anchor = Pos {nChars = 2196, line = 49, col = 7}, position = Pos {nChars = 2204, line = 49, col = 15}})) "birdFoot" [],Call (Fwd (Range {anchor = Pos {nChars = 2205, line = 49, col = 16}, position = Pos {nChars = 2208, line = 49, col = 19}})) "Def" [],Rep (Fwd (Range {anchor = Pos {nChars = 2209, line = 49, col = 20}, position = Pos {nChars = 2213, line = 49, col = 24}})) (Call (Fwd (Range {anchor = Pos {nChars = 2209, line = 49, col = 20}, position = Pos {nChars = 2212, line = 49, col = 23}})) "lws" []) (0,Nothing),Alt (Fwd (Range {anchor = Pos {nChars = 2215, line = 49, col = 26}, position = Pos {nChars = 2221, line = 49, col = 32}})) [Call (Fwd (Range {anchor = Pos {nChars = 2215, line = 49, col = 26}, position = Pos {nChars = 2217, line = 49, col = 28}})) "nl" [],End (Fwd (Range {anchor = Pos {nChars = 2220, line = 49, col = 31}, position = Pos {nChars = 2221, line = 49, col = 32}}))]],Call (Fwd (Range {anchor = Pos {nChars = 2229, line = 50, col = 7}, position = Pos {nChars = 2232, line = 50, col = 10}})) "vws" []]),(Fwd (Range {anchor = Pos {nChars = 2237, line = 52, col = 3}, position = Pos {nChars = 2250, line = 52, col = 16}}),(Fwd (Range {anchor = Pos {nChars = 2237, line = 52, col = 3}, position = Pos {nChars = 2239, line = 52, col = 5}}),"nl",[]),Ctor (Fwd (Range {anchor = Pos {nChars = 2242, line = 52, col = 8}, position = Pos {nChars = 2244, line = 52, col = 10}})) "nl" (Char (Fwd (Range {anchor = Pos {nChars = 2246, line = 52, col = 12}, position = Pos {nChars = 2250, line = 52, col = 16}})) '\n')),(Fwd (Range {anchor = Pos {nChars = 2394, line = 57, col = 3}, position = Pos {nChars = 2415, line = 57, col = 24}}),(Fwd (Range {anchor = Pos {nChars = 2394, line = 57, col = 3}, position = Pos {nChars = 2399, line = 57, col = 8}}),"space",[]),Ctor (Fwd (Range {anchor = Pos {nChars = 2402, line = 57, col = 11}, position = Pos {nChars = 2407, line = 57, col = 16}})) "space" (Flat (Fwd (Range {anchor = Pos {nChars = 2409, line = 57, col = 18}, position = Pos {nChars = 2415, line = 57, col = 24}})) (Rep (Fwd (Range {anchor = Pos {nChars = 2410, line = 57, col = 19}, position = Pos {nChars = 2414, line = 57, col = 23}})) (Char (Fwd (Range {anchor = Pos {nChars = 2410, line = 57, col = 19}, position = Pos {nChars = 2413, line = 57, col = 22}})) ' ') (1,Nothing)))),(Fwd (Range {anchor = Pos {nChars = 2418, line = 58, col = 3}, position = Pos {nChars = 2451, line = 58, col = 36}}),(Fwd (Range {anchor = Pos {nChars = 2418, line = 58, col = 3}, position = Pos {nChars = 2425, line = 58, col = 10}}),"comment",[]),Ctor (Fwd (Range {anchor = Pos {nChars = 2428, line = 58, col = 13}, position = Pos {nChars = 2435, line = 58, col = 20}})) "comment" (Seq (Fwd (Range {anchor = Pos {nChars = 2437, line = 58, col = 22}, position = Pos {nChars = 2451, line = 58, col = 36}})) [Char (Fwd (Range {anchor = Pos {nChars = 2437, line = 58, col = 22}, position = Pos {nChars = 2440, line = 58, col = 25}})) '#',Flat (Fwd (Range {anchor = Pos {nChars = 2441, line = 58, col = 26}, position = Pos {nChars = 2451, line = 58, col = 36}})) (Rep (Fwd (Range {anchor = Pos {nChars = 2442, line = 58, col = 27}, position = Pos {nChars = 2450, line = 58, col = 35}})) (SatNeg (Fwd (Range {anchor = Pos {nChars = 2442, line = 58, col = 27}, position = Pos {nChars = 2449, line = 58, col = 34}})) [SatChar (Fwd (Range {anchor = Pos {nChars = 2444, line = 58, col = 29}, position = Pos {nChars = 2448, line = 58, col = 33}})) '\n']) (0,Nothing))])),(Fwd (Range {anchor = Pos {nChars = 2934, line = 65, col = 3}, position = Pos {nChars = 2973, line = 65, col = 42}}),(Fwd (Range {anchor = Pos {nChars = 2934, line = 65, col = 3}, position = Pos {nChars = 2951, line = 65, col = 20}}),"birdFoot.improper",[]),Ctor (Fwd (Range {anchor = Pos {nChars = 2954, line = 65, col = 23}, position = Pos {nChars = 2963, line = 65, col = 32}})) "bird-foot" (Seq (Fwd (Range {anchor = Pos {nChars = 2965, line = 65, col = 34}, position = Pos {nChars = 2973, line = 65, col = 42}})) [Char (Fwd (Range {anchor = Pos {nChars = 2965, line = 65, col = 34}, position = Pos {nChars = 2968, line = 65, col = 37}})) '>',Char (Fwd (Range {anchor = Pos {nChars = 2969, line = 65, col = 38}, position = Pos {nChars = 2973, line = 65, col = 42}})) '\n'])),(Fwd (Range {anchor = Pos {nChars = 3391, line = 72, col = 3}, position = Pos {nChars = 3461, line = 74, col = 43}}),(Fwd (Range {anchor = Pos {nChars = 3391, line = 72, col = 3}, position = Pos {nChars = 3394, line = 72, col = 6}}),"lws",[]),Alt (Fwd (Range {anchor = Pos {nChars = 3397, line = 72, col = 9}, position = Pos {nChars = 3461, line = 74, col = 43}})) [Call (Fwd (Range {anchor = Pos {nChars = 3397, line = 72, col = 9}, position = Pos {nChars = 3402, line = 72, col = 14}})) "space" [],Call (Fwd (Range {anchor = Pos {nChars = 3411, line = 73, col = 9}, position = Pos {nChars = 3418, line = 73, col = 16}})) "comment" [],Seq (Fwd (Range {anchor = Pos {nChars = 3427, line = 74, col = 9}, position = Pos {nChars = 3461, line = 74, col = 43}})) [Call (Fwd (Range {anchor = Pos {nChars = 3427, line = 74, col = 9}, position = Pos {nChars = 3429, line = 74, col = 11}})) "nl" [],Rep (Fwd (Range {anchor = Pos {nChars = 3430, line = 74, col = 12}, position = Pos {nChars = 3448, line = 74, col = 30}})) (Call (Fwd (Range {anchor = Pos {nChars = 3430, line = 74, col = 12}, position = Pos {nChars = 3447, line = 74, col = 29}})) "birdFoot.improper" []) (0,Nothing),Call (Fwd (Range {anchor = Pos {nChars = 3449, line = 74, col = 31}, position = Pos {nChars = 3457, line = 74, col = 39}})) "birdFoot" [],Call (Fwd (Range {anchor = Pos {nChars = 3458, line = 74, col = 40}, position = Pos {nChars = 3461, line = 74, col = 43}})) "lws" []]]),(Fwd (Range {anchor = Pos {nChars = 3564, line = 78, col = 3}, position = Pos {nChars = 3623, line = 79, col = 26}}),(Fwd (Range {anchor = Pos {nChars = 3564, line = 78, col = 3}, position = Pos {nChars = 3567, line = 78, col = 6}}),"vws",[]),Alt (Fwd (Range {anchor = Pos {nChars = 3570, line = 78, col = 9}, position = Pos {nChars = 3623, line = 79, col = 26}})) [Seq (Fwd (Range {anchor = Pos {nChars = 3570, line = 78, col = 9}, position = Pos {nChars = 3597, line = 78, col = 36}})) [Call (Fwd (Range {anchor = Pos {nChars = 3570, line = 78, col = 9}, position = Pos {nChars = 3578, line = 78, col = 17}})) "birdFoot" [],Rep (Fwd (Range {anchor = Pos {nChars = 3579, line = 78, col = 18}, position = Pos {nChars = 3585, line = 78, col = 24}})) (Call (Fwd (Range {anchor = Pos {nChars = 3579, line = 78, col = 18}, position = Pos {nChars = 3584, line = 78, col = 23}})) "space" []) (0,Nothing),Rep (Fwd (Range {anchor = Pos {nChars = 3586, line = 78, col = 25}, position = Pos {nChars = 3594, line = 78, col = 33}})) (Call (Fwd (Range {anchor = Pos {nChars = 3586, line = 78, col = 25}, position = Pos {nChars = 3593, line = 78, col = 32}})) "comment" []) (0,Just 1),Call (Fwd (Range {anchor = Pos {nChars = 3595, line = 78, col = 34}, position = Pos {nChars = 3597, line = 78, col = 36}})) "nl" []],Call (Fwd (Range {anchor = Pos {nChars = 3606, line = 79, col = 9}, position = Pos {nChars = 3623, line = 79, col = 26}})) "birdFoot.improper" []]),(Fwd (Range {anchor = Pos {nChars = 3893, line = 87, col = 3}, position = Pos {nChars = 3948, line = 87, col = 58}}),(Fwd (Range {anchor = Pos {nChars = 3893, line = 87, col = 3}, position = Pos {nChars = 3902, line = 87, col = 12}}),"Def.Start",[]),Ctor (Fwd (Range {anchor = Pos {nChars = 3905, line = 87, col = 15}, position = Pos {nChars = 3914, line = 87, col = 24}})) "def-start" (Seq (Fwd (Range {anchor = Pos {nChars = 3916, line = 87, col = 26}, position = Pos {nChars = 3948, line = 87, col = 58}})) [Str (Fwd (Range {anchor = Pos {nChars = 3916, line = 87, col = 26}, position = Pos {nChars = 3924, line = 87, col = 34}})) "@start",Rep (Fwd (Range {anchor = Pos {nChars = 3925, line = 87, col = 35}, position = Pos {nChars = 3929, line = 87, col = 39}})) (Call (Fwd (Range {anchor = Pos {nChars = 3925, line = 87, col = 35}, position = Pos {nChars = 3928, line = 87, col = 38}})) "lws" []) (1,Nothing),Char (Fwd (Range {anchor = Pos {nChars = 3930, line = 87, col = 40}, position = Pos {nChars = 3933, line = 87, col = 43}})) '=',Rep (Fwd (Range {anchor = Pos {nChars = 3934, line = 87, col = 44}, position = Pos {nChars = 3938, line = 87, col = 48}})) (Call (Fwd (Range {anchor = Pos {nChars = 3934, line = 87, col = 44}, position = Pos {nChars = 3937, line = 87, col = 47}})) "lws" []) (1,Nothing),Call (Fwd (Range {anchor = Pos {nChars = 3939, line = 87, col = 49}, position = Pos {nChars = 3948, line = 87, col = 58}})) "Name.rule" []])),(Fwd (Range {anchor = Pos {nChars = 4171, line = 93, col = 3}, position = Pos {nChars = 4233, line = 93, col = 65}}),(Fwd (Range {anchor = Pos {nChars = 4171, line = 93, col = 3}, position = Pos {nChars = 4179, line = 93, col = 11}}),"Def.Rule",[]),Ctor (Fwd (Range {anchor = Pos {nChars = 4182, line = 93, col = 14}, position = Pos {nChars = 4190, line = 93, col = 22}})) "def-rule" (Seq (Fwd (Range {anchor = Pos {nChars = 4192, line = 93, col = 24}, position = Pos {nChars = 4233, line = 93, col = 65}})) [Call (Fwd (Range {anchor = Pos {nChars = 4192, line = 93, col = 24}, position = Pos {nChars = 4204, line = 93, col = 36}})) "Def.Rule.lhs" [],Rep (Fwd (Range {anchor = Pos {nChars = 4205, line = 93, col = 37}, position = Pos {nChars = 4209, line = 93, col = 41}})) (Call (Fwd (Range {anchor = Pos {nChars = 4205, line = 93, col = 37}, position = Pos {nChars = 4208, line = 93, col = 40}})) "lws" []) (1,Nothing),Char (Fwd (Range {anchor = Pos {nChars = 4210, line = 93, col = 42}, position = Pos {nChars = 4213, line = 93, col = 45}})) '=',Rep (Fwd (Range {anchor = Pos {nChars = 4214, line = 93, col = 46}, position = Pos {nChars = 4218, line = 93, col = 50}})) (Call (Fwd (Range {anchor = Pos {nChars = 4214, line = 93, col = 46}, position = Pos {nChars = 4217, line = 93, col = 49}})) "lws" []) (1,Nothing),Call (Fwd (Range {anchor = Pos {nChars = 4219, line = 93, col = 51}, position = Pos {nChars = 4233, line = 93, col = 65}})) "Rule.allowFlat" []])),(Fwd (Range {anchor = Pos {nChars = 4238, line = 95, col = 3}, position = Pos {nChars = 4362, line = 97, col = 27}}),(Fwd (Range {anchor = Pos {nChars = 4238, line = 95, col = 3}, position = Pos {nChars = 4250, line = 95, col = 15}}),"Def.Rule.lhs",[]),Alt (Fwd (Range {anchor = Pos {nChars = 4253, line = 95, col = 18}, position = Pos {nChars = 4362, line = 97, col = 27}})) [Ctor (Fwd (Range {anchor = Pos {nChars = 4253, line = 95, col = 18}, position = Pos {nChars = 4268, line = 95, col = 33}})) "rule-parametric" (Seq (Fwd (Range {anchor = Pos {nChars = 4288, line = 96, col = 19}, position = Pos {nChars = 4335, line = 96, col = 66}})) [Call (Fwd (Range {anchor = Pos {nChars = 4288, line = 96, col = 19}, position = Pos {nChars = 4297, line = 96, col = 28}})) "Name.rule" [],Call (Fwd (Range {anchor = Pos {nChars = 4298, line = 96, col = 29}, position = Pos {nChars = 4335, line = 96, col = 66}})) "enclose.angles" [Call (Fwd (Range {anchor = Pos {nChars = 4313, line = 96, col = 44}, position = Pos {nChars = 4334, line = 96, col = 65}})) "sep.comma" [Call (Fwd (Range {anchor = Pos {nChars = 4323, line = 96, col = 54}, position = Pos {nChars = 4333, line = 96, col = 64}})) "Name.param" []]]]),Call (Fwd (Range {anchor = Pos {nChars = 4353, line = 97, col = 18}, position = Pos {nChars = 4362, line = 97, col = 27}})) "Name.rule" []]),(Fwd (Range {anchor = Pos {nChars = 4574, line = 102, col = 3}, position = Pos {nChars = 4642, line = 102, col = 71}}),(Fwd (Range {anchor = Pos {nChars = 4574, line = 102, col = 3}, position = Pos {nChars = 4583, line = 102, col = 12}}),"Def.Class",[]),Ctor (Fwd (Range {anchor = Pos {nChars = 4586, line = 102, col = 15}, position = Pos {nChars = 4595, line = 102, col = 24}})) "def-class" (Seq (Fwd (Range {anchor = Pos {nChars = 4597, line = 102, col = 26}, position = Pos {nChars = 4642, line = 102, col = 71}})) [Call (Fwd (Range {anchor = Pos {nChars = 4597, line = 102, col = 26}, position = Pos {nChars = 4622, line = 102, col = 51}})) "enclose.colon" [Call (Fwd (Range {anchor = Pos {nChars = 4611, line = 102, col = 40}, position = Pos {nChars = 4621, line = 102, col = 50}})) "Name.class" []],Rep (Fwd (Range {anchor = Pos {nChars = 4623, line = 102, col = 52}, position = Pos {nChars = 4627, line = 102, col = 56}})) (Call (Fwd (Range {anchor = Pos {nChars = 4623, line = 102, col = 52}, position = Pos {nChars = 4626, line = 102, col = 55}})) "lws" []) (1,Nothing),Char (Fwd (Range {anchor = Pos {nChars = 4628, line = 102, col = 57}, position = Pos {nChars = 4631, line = 102, col = 60}})) '=',Rep (Fwd (Range {anchor = Pos {nChars = 4632, line = 102, col = 61}, position = Pos {nChars = 4636, line = 102, col = 65}})) (Call (Fwd (Range {anchor = Pos {nChars = 4632, line = 102, col = 61}, position = Pos {nChars = 4635, line = 102, col = 64}})) "lws" []) (1,Nothing),Call (Fwd (Range {anchor = Pos {nChars = 4637, line = 102, col = 66}, position = Pos {nChars = 4642, line = 102, col = 71}})) "Class" []])),(Fwd (Range {anchor = Pos {nChars = 4715, line = 106, col = 3}, position = Pos {nChars = 4753, line = 106, col = 41}}),(Fwd (Range {anchor = Pos {nChars = 4715, line = 106, col = 3}, position = Pos {nChars = 4718, line = 106, col = 6}}),"Def",[]),Alt (Fwd (Range {anchor = Pos {nChars = 4721, line = 106, col = 9}, position = Pos {nChars = 4753, line = 106, col = 41}})) [Call (Fwd (Range {anchor = Pos {nChars = 4721, line = 106, col = 9}, position = Pos {nChars = 4730, line = 106, col = 18}})) "Def.Start" [],Call (Fwd (Range {anchor = Pos {nChars = 4733, line = 106, col = 21}, position = Pos {nChars = 4742, line = 106, col = 30}})) "Def.Class" [],Call (Fwd (Range {anchor = Pos {nChars = 4745, line = 106, col = 33}, position = Pos {nChars = 4753, line = 106, col = 41}})) "Def.Rule" []]),(Fwd (Range {anchor = Pos {nChars = 6290, line = 132, col = 3}, position = Pos {nChars = 6492, line = 137, col = 47}}),(Fwd (Range {anchor = Pos {nChars = 6290, line = 132, col = 3}, position = Pos {nChars = 6299, line = 132, col = 12}}),"Rule.prim",[]),Alt (Fwd (Range {anchor = Pos {nChars = 6306, line = 133, col = 7}, position = Pos {nChars = 6492, line = 137, col = 47}})) [Ctor (Fwd (Range {anchor = Pos {nChars = 6306, line = 133, col = 7}, position = Pos {nChars = 6315, line = 133, col = 16}})) "rule-char" (Seq (Fwd (Range {anchor = Pos {nChars = 6317, line = 133, col = 18}, position = Pos {nChars = 6334, line = 133, col = 35}})) [Char (Fwd (Range {anchor = Pos {nChars = 6317, line = 133, col = 18}, position = Pos {nChars = 6321, line = 133, col = 22}})) '\'',Call (Fwd (Range {anchor = Pos {nChars = 6322, line = 133, col = 23}, position = Pos {nChars = 6329, line = 133, col = 30}})) "char.sq" [],Char (Fwd (Range {anchor = Pos {nChars = 6330, line = 133, col = 31}, position = Pos {nChars = 6334, line = 133, col = 35}})) '\'']),Ctor (Fwd (Range {anchor = Pos {nChars = 6341, line = 134, col = 7}, position = Pos {nChars = 6349, line = 134, col = 15}})) "rule-sat" (Seq (Fwd (Range {anchor = Pos {nChars = 6351, line = 134, col = 17}, position = Pos {nChars = 6386, line = 134, col = 52}})) [Alt (Fwd (Range {anchor = Pos {nChars = 6352, line = 134, col = 18}, position = Pos {nChars = 6362, line = 134, col = 28}})) [Str (Fwd (Range {anchor = Pos {nChars = 6352, line = 134, col = 18}, position = Pos {nChars = 6356, line = 134, col = 22}})) "[^",Char (Fwd (Range {anchor = Pos {nChars = 6359, line = 134, col = 25}, position = Pos {nChars = 6362, line = 134, col = 28}})) '['],Rep (Fwd (Range {anchor = Pos {nChars = 6364, line = 134, col = 30}, position = Pos {nChars = 6382, line = 134, col = 48}})) (Call (Fwd (Range {anchor = Pos {nChars = 6364, line = 134, col = 30}, position = Pos {nChars = 6381, line = 134, col = 47}})) "Rule.satisfy.part" []) (0,Nothing),Char (Fwd (Range {anchor = Pos {nChars = 6383, line = 134, col = 49}, position = Pos {nChars = 6386, line = 134, col = 52}})) ']']),Ctor (Fwd (Range {anchor = Pos {nChars = 6393, line = 135, col = 7}, position = Pos {nChars = 6404, line = 135, col = 18}})) "rule-string" (Seq (Fwd (Range {anchor = Pos {nChars = 6406, line = 135, col = 20}, position = Pos {nChars = 6425, line = 135, col = 39}})) [Char (Fwd (Range {anchor = Pos {nChars = 6406, line = 135, col = 20}, position = Pos {nChars = 6410, line = 135, col = 24}})) '"',Rep (Fwd (Range {anchor = Pos {nChars = 6411, line = 135, col = 25}, position = Pos {nChars = 6420, line = 135, col = 34}})) (Call (Fwd (Range {anchor = Pos {nChars = 6411, line = 135, col = 25}, position = Pos {nChars = 6419, line = 135, col = 33}})) "chars.dq" []) (0,Nothing),Char (Fwd (Range {anchor = Pos {nChars = 6421, line = 135, col = 35}, position = Pos {nChars = 6425, line = 135, col = 39}})) '"']),Ctor (Fwd (Range {anchor = Pos {nChars = 6432, line = 136, col = 7}, position = Pos {nChars = 6440, line = 136, col = 15}})) "rule-end" (Char (Fwd (Range {anchor = Pos {nChars = 6442, line = 136, col = 17}, position = Pos {nChars = 6445, line = 136, col = 20}})) '$'),Ctor (Fwd (Range {anchor = Pos {nChars = 6452, line = 137, col = 7}, position = Pos {nChars = 6461, line = 137, col = 16}})) "rule-void" (Seq (Fwd (Range {anchor = Pos {nChars = 6463, line = 137, col = 18}, position = Pos {nChars = 6492, line = 137, col = 47}})) [Char (Fwd (Range {anchor = Pos {nChars = 6463, line = 137, col = 18}, position = Pos {nChars = 6466, line = 137, col = 21}})) '0',Call (Fwd (Range {anchor = Pos {nChars = 6467, line = 137, col = 22}, position = Pos {nChars = 6472, line = 137, col = 27}})) "colon" [],Char (Fwd (Range {anchor = Pos {nChars = 6473, line = 137, col = 28}, position = Pos {nChars = 6477, line = 137, col = 32}})) '"',Rep (Fwd (Range {anchor = Pos {nChars = 6478, line = 137, col = 33}, position = Pos {nChars = 6487, line = 137, col = 42}})) (Call (Fwd (Range {anchor = Pos {nChars = 6478, line = 137, col = 33}, position = Pos {nChars = 6486, line = 137, col = 41}})) "chars.dq" []) (1,Nothing),Char (Fwd (Range {anchor = Pos {nChars = 6488, line = 137, col = 43}, position = Pos {nChars = 6492, line = 137, col = 47}})) '"'])]),(Fwd (Range {anchor = Pos {nChars = 6916, line = 146, col = 3}, position = Pos {nChars = 7102, line = 151, col = 10}}),(Fwd (Range {anchor = Pos {nChars = 6916, line = 146, col = 3}, position = Pos {nChars = 6933, line = 146, col = 20}}),"Rule.satisfy.part",[]),Alt (Fwd (Range {anchor = Pos {nChars = 6940, line = 147, col = 7}, position = Pos {nChars = 7102, line = 151, col = 10}})) [Ctor (Fwd (Range {anchor = Pos {nChars = 6940, line = 147, col = 7}, position = Pos {nChars = 6949, line = 147, col = 16}})) "sat-range" (Seq (Fwd (Range {anchor = Pos {nChars = 6951, line = 147, col = 18}, position = Pos {nChars = 6991, line = 147, col = 58}})) [Char (Fwd (Range {anchor = Pos {nChars = 6951, line = 147, col = 18}, position = Pos {nChars = 6955, line = 147, col = 22}})) '\'',Call (Fwd (Range {anchor = Pos {nChars = 6956, line = 147, col = 23}, position = Pos {nChars = 6963, line = 147, col = 30}})) "char.sq" [],Char (Fwd (Range {anchor = Pos {nChars = 6964, line = 147, col = 31}, position = Pos {nChars = 6968, line = 147, col = 35}})) '\'',Str (Fwd (Range {anchor = Pos {nChars = 6969, line = 147, col = 36}, position = Pos {nChars = 6973, line = 147, col = 40}})) "..",Char (Fwd (Range {anchor = Pos {nChars = 6974, line = 147, col = 41}, position = Pos {nChars = 6978, line = 147, col = 45}})) '\'',Call (Fwd (Range {anchor = Pos {nChars = 6979, line = 147, col = 46}, position = Pos {nChars = 6986, line = 147, col = 53}})) "char.sq" [],Char (Fwd (Range {anchor = Pos {nChars = 6987, line = 147, col = 54}, position = Pos {nChars = 6991, line = 147, col = 58}})) '\'']),Ctor (Fwd (Range {anchor = Pos {nChars = 6998, line = 148, col = 7}, position = Pos {nChars = 7006, line = 148, col = 15}})) "sat-char" (Seq (Fwd (Range {anchor = Pos {nChars = 7008, line = 148, col = 17}, position = Pos {nChars = 7025, line = 148, col = 34}})) [Char (Fwd (Range {anchor = Pos {nChars = 7008, line = 148, col = 17}, position = Pos {nChars = 7012, line = 148, col = 21}})) '\'',Call (Fwd (Range {anchor = Pos {nChars = 7013, line = 148, col = 22}, position = Pos {nChars = 7020, line = 148, col = 29}})) "char.sq" [],Char (Fwd (Range {anchor = Pos {nChars = 7021, line = 148, col = 30}, position = Pos {nChars = 7025, line = 148, col = 34}})) '\'']),Ctor (Fwd (Range {anchor = Pos {nChars = 7032, line = 149, col = 7}, position = Pos {nChars = 7039, line = 149, col = 14}})) "sat-var" (Call (Fwd (Range {anchor = Pos {nChars = 7041, line = 149, col = 16}, position = Pos {nChars = 7066, line = 149, col = 41}})) "enclose.colon" [Call (Fwd (Range {anchor = Pos {nChars = 7055, line = 149, col = 30}, position = Pos {nChars = 7065, line = 149, col = 40}})) "Name.class" []]),Flat (Fwd (Range {anchor = Pos {nChars = 7073, line = 150, col = 7}, position = Pos {nChars = 7092, line = 150, col = 26}})) (Rep (Fwd (Range {anchor = Pos {nChars = 7075, line = 150, col = 9}, position = Pos {nChars = 7090, line = 150, col = 24}})) (Sat (Fwd (Range {anchor = Pos {nChars = 7075, line = 150, col = 9}, position = Pos {nChars = 7089, line = 150, col = 23}})) [SatVar (Fwd (Range {anchor = Pos {nChars = 7076, line = 150, col = 10}, position = Pos {nChars = 7088, line = 150, col = 22}})) "char.brack"]) (1,Nothing)),Call (Fwd (Range {anchor = Pos {nChars = 7099, line = 151, col = 7}, position = Pos {nChars = 7102, line = 151, col = 10}})) "lws" []]),(Fwd (Range {anchor = Pos {nChars = 7648, line = 161, col = 3}, position = Pos {nChars = 7814, line = 165, col = 16}}),(Fwd (Range {anchor = Pos {nChars = 7648, line = 161, col = 3}, position = Pos {nChars = 7660, line = 161, col = 15}}),"Rule.Atom",["f"]),Alt (Fwd (Range {anchor = Pos {nChars = 7667, line = 162, col = 7}, position = Pos {nChars = 7814, line = 165, col = 16}})) [Ctor (Fwd (Range {anchor = Pos {nChars = 7667, line = 162, col = 7}, position = Pos {nChars = 7677, line = 162, col = 17}})) "rule-group" (Call (Fwd (Range {anchor = Pos {nChars = 7679, line = 162, col = 19}, position = Pos {nChars = 7709, line = 162, col = 49}})) "enclose.parens" [Call (Fwd (Range {anchor = Pos {nChars = 7694, line = 162, col = 34}, position = Pos {nChars = 7708, line = 162, col = 48}})) "Rule.allowFlat" []]),Ctor (Fwd (Range {anchor = Pos {nChars = 7716, line = 163, col = 7}, position = Pos {nChars = 7725, line = 163, col = 16}})) "rule-call" (Seq (Fwd (Range {anchor = Pos {nChars = 7727, line = 163, col = 18}, position = Pos {nChars = 7779, line = 163, col = 70}})) [Call (Fwd (Range {anchor = Pos {nChars = 7727, line = 163, col = 18}, position = Pos {nChars = 7736, line = 163, col = 27}})) "Name.rule" [],Rep (Fwd (Range {anchor = Pos {nChars = 7737, line = 163, col = 28}, position = Pos {nChars = 7779, line = 163, col = 70}})) (Call (Fwd (Range {anchor = Pos {nChars = 7737, line = 163, col = 28}, position = Pos {nChars = 7778, line = 163, col = 69}})) "enclose.angles" [Call (Fwd (Range {anchor = Pos {nChars = 7752, line = 163, col = 43}, position = Pos {nChars = 7777, line = 163, col = 68}})) "sep.comma" [Call (Fwd (Range {anchor = Pos {nChars = 7762, line = 163, col = 53}, position = Pos {nChars = 7776, line = 163, col = 67}})) "Rule.allowFlat" []]]) (0,Just 1)]),Ctor (Fwd (Range {anchor = Pos {nChars = 7786, line = 164, col = 7}, position = Pos {nChars = 7795, line = 164, col = 16}})) "rule-flat" (Call (Fwd (Range {anchor = Pos {nChars = 7797, line = 164, col = 18}, position = Pos {nChars = 7798, line = 164, col = 19}})) "f" []),Call (Fwd (Range {anchor = Pos {nChars = 7805, line = 165, col = 7}, position = Pos {nChars = 7814, line = 165, col = 16}})) "Rule.prim" []]),(Fwd (Range {anchor = Pos {nChars = 7819, line = 167, col = 3}, position = Pos {nChars = 7867, line = 167, col = 51}}),(Fwd (Range {anchor = Pos {nChars = 7819, line = 167, col = 3}, position = Pos {nChars = 7828, line = 167, col = 12}}),"Rule.Flat",[]),Call (Fwd (Range {anchor = Pos {nChars = 7831, line = 167, col = 15}, position = Pos {nChars = 7867, line = 167, col = 51}})) "enclose" [Char (Fwd (Range {anchor = Pos {nChars = 7839, line = 167, col = 23}, position = Pos {nChars = 7842, line = 167, col = 26}})) '/',Call (Fwd (Range {anchor = Pos {nChars = 7844, line = 167, col = 28}, position = Pos {nChars = 7861, line = 167, col = 45}})) "Rule.disallowFlat" [],Char (Fwd (Range {anchor = Pos {nChars = 7863, line = 167, col = 47}, position = Pos {nChars = 7866, line = 167, col = 50}})) '/']),(Fwd (Range {anchor = Pos {nChars = 8558, line = 180, col = 3}, position = Pos {nChars = 8590, line = 180, col = 35}}),(Fwd (Range {anchor = Pos {nChars = 8558, line = 180, col = 3}, position = Pos {nChars = 8572, line = 180, col = 17}}),"Rule.allowFlat",[]),Call (Fwd (Range {anchor = Pos {nChars = 8575, line = 180, col = 20}, position = Pos {nChars = 8590, line = 180, col = 35}})) "Rule" [Call (Fwd (Range {anchor = Pos {nChars = 8580, line = 180, col = 25}, position = Pos {nChars = 8589, line = 180, col = 34}})) "Rule.Flat" []]),(Fwd (Range {anchor = Pos {nChars = 8593, line = 181, col = 3}, position = Pos {nChars = 8645, line = 181, col = 55}}),(Fwd (Range {anchor = Pos {nChars = 8593, line = 181, col = 3}, position = Pos {nChars = 8610, line = 181, col = 20}}),"Rule.disallowFlat",[]),Call (Fwd (Range {anchor = Pos {nChars = 8613, line = 181, col = 23}, position = Pos {nChars = 8645, line = 181, col = 55}})) "Rule" [Void (Fwd (Range {anchor = Pos {nChars = 8618, line = 181, col = 28}, position = Pos {nChars = 8644, line = 181, col = 54}})) "flat rule inside flat"]),(Fwd (Range {anchor = Pos {nChars = 8803, line = 186, col = 3}, position = Pos {nChars = 8881, line = 188, col = 19}}),(Fwd (Range {anchor = Pos {nChars = 8803, line = 186, col = 3}, position = Pos {nChars = 8817, line = 186, col = 17}}),"Rule.Factor",["f"]),Alt (Fwd (Range {anchor = Pos {nChars = 8824, line = 187, col = 7}, position = Pos {nChars = 8881, line = 188, col = 19}})) [Ctor (Fwd (Range {anchor = Pos {nChars = 8824, line = 187, col = 7}, position = Pos {nChars = 8832, line = 187, col = 15}})) "rule-rep" (Seq (Fwd (Range {anchor = Pos {nChars = 8834, line = 187, col = 17}, position = Pos {nChars = 8862, line = 187, col = 45}})) [Call (Fwd (Range {anchor = Pos {nChars = 8834, line = 187, col = 17}, position = Pos {nChars = 8846, line = 187, col = 29}})) "Rule.Atom" [Call (Fwd (Range {anchor = Pos {nChars = 8844, line = 187, col = 27}, position = Pos {nChars = 8845, line = 187, col = 28}})) "f" []],Call (Fwd (Range {anchor = Pos {nChars = 8847, line = 187, col = 30}, position = Pos {nChars = 8862, line = 187, col = 45}})) "Rule.Rep.amount" []]),Call (Fwd (Range {anchor = Pos {nChars = 8869, line = 188, col = 7}, position = Pos {nChars = 8881, line = 188, col = 19}})) "Rule.Atom" [Call (Fwd (Range {anchor = Pos {nChars = 8879, line = 188, col = 17}, position = Pos {nChars = 8880, line = 188, col = 18}})) "f" []]]),(Fwd (Range {anchor = Pos {nChars = 8886, line = 190, col = 3}, position = Pos {nChars = 9013, line = 193, col = 42}}),(Fwd (Range {anchor = Pos {nChars = 8886, line = 190, col = 3}, position = Pos {nChars = 8901, line = 190, col = 18}}),"Rule.Rep.amount",[]),Alt (Fwd (Range {anchor = Pos {nChars = 8908, line = 191, col = 7}, position = Pos {nChars = 9013, line = 193, col = 42}})) [Sat (Fwd (Range {anchor = Pos {nChars = 8908, line = 191, col = 7}, position = Pos {nChars = 8913, line = 191, col = 12}})) [SatSet (Fwd (Range {anchor = Pos {nChars = 8909, line = 191, col = 8}, position = Pos {nChars = 8912, line = 191, col = 11}})) "*+?"],Ctor (Fwd (Range {anchor = Pos {nChars = 8920, line = 192, col = 7}, position = Pos {nChars = 8930, line = 192, col = 17}})) "rep-custom" (Call (Fwd (Range {anchor = Pos {nChars = 8932, line = 192, col = 19}, position = Pos {nChars = 8971, line = 192, col = 58}})) "enclose.braces" [Seq (Fwd (Range {anchor = Pos {nChars = 8947, line = 192, col = 34}, position = Pos {nChars = 8970, line = 192, col = 57}})) [Rep (Fwd (Range {anchor = Pos {nChars = 8947, line = 192, col = 34}, position = Pos {nChars = 8955, line = 192, col = 42}})) (Call (Fwd (Range {anchor = Pos {nChars = 8947, line = 192, col = 34}, position = Pos {nChars = 8954, line = 192, col = 41}})) "num.nat" []) (0,Just 1),Call (Fwd (Range {anchor = Pos {nChars = 8956, line = 192, col = 43}, position = Pos {nChars = 8961, line = 192, col = 48}})) "comma" [],Rep (Fwd (Range {anchor = Pos {nChars = 8962, line = 192, col = 49}, position = Pos {nChars = 8970, line = 192, col = 57}})) (Call (Fwd (Range {anchor = Pos {nChars = 8962, line = 192, col = 49}, position = Pos {nChars = 8969, line = 192, col = 56}})) "num.nat" []) (0,Just 1)]]),Ctor (Fwd (Range {anchor = Pos {nChars = 8978, line = 193, col = 7}, position = Pos {nChars = 8988, line = 193, col = 17}})) "rep-custom" (Call (Fwd (Range {anchor = Pos {nChars = 8990, line = 193, col = 19}, position = Pos {nChars = 9013, line = 193, col = 42}})) "enclose.braces" [Call (Fwd (Range {anchor = Pos {nChars = 9005, line = 193, col = 34}, position = Pos {nChars = 9012, line = 193, col = 41}})) "num.nat" []])]),(Fwd (Range {anchor = Pos {nChars = 9370, line = 200, col = 3}, position = Pos {nChars = 9536, line = 203, col = 21}}),(Fwd (Range {anchor = Pos {nChars = 9370, line = 200, col = 3}, position = Pos {nChars = 9381, line = 200, col = 14}}),"Rule.Seq",["f"]),Alt (Fwd (Range {anchor = Pos {nChars = 9388, line = 201, col = 7}, position = Pos {nChars = 9536, line = 203, col = 21}})) [Ctor (Fwd (Range {anchor = Pos {nChars = 9388, line = 201, col = 7}, position = Pos {nChars = 9400, line = 201, col = 19}})) "rule-capture" (Seq (Fwd (Range {anchor = Pos {nChars = 9402, line = 201, col = 21}, position = Pos {nChars = 9461, line = 201, col = 80}})) [Str (Fwd (Range {anchor = Pos {nChars = 9402, line = 201, col = 21}, position = Pos {nChars = 9405, line = 201, col = 24}})) "@",Call (Fwd (Range {anchor = Pos {nChars = 9406, line = 201, col = 25}, position = Pos {nChars = 9415, line = 201, col = 34}})) "Name.rule" [],Rep (Fwd (Range {anchor = Pos {nChars = 9416, line = 201, col = 35}, position = Pos {nChars = 9420, line = 201, col = 39}})) (Call (Fwd (Range {anchor = Pos {nChars = 9416, line = 201, col = 35}, position = Pos {nChars = 9419, line = 201, col = 38}})) "lws" []) (0,Nothing),Str (Fwd (Range {anchor = Pos {nChars = 9421, line = 201, col = 40}, position = Pos {nChars = 9424, line = 201, col = 43}})) "=",Rep (Fwd (Range {anchor = Pos {nChars = 9425, line = 201, col = 44}, position = Pos {nChars = 9429, line = 201, col = 48}})) (Call (Fwd (Range {anchor = Pos {nChars = 9425, line = 201, col = 44}, position = Pos {nChars = 9428, line = 201, col = 47}})) "lws" []) (1,Nothing),Call (Fwd (Range {anchor = Pos {nChars = 9430, line = 201, col = 49}, position = Pos {nChars = 9444, line = 201, col = 63}})) "Rule.Factor" [Call (Fwd (Range {anchor = Pos {nChars = 9442, line = 201, col = 61}, position = Pos {nChars = 9443, line = 201, col = 62}})) "f" []],Rep (Fwd (Range {anchor = Pos {nChars = 9445, line = 201, col = 64}, position = Pos {nChars = 9449, line = 201, col = 68}})) (Call (Fwd (Range {anchor = Pos {nChars = 9445, line = 201, col = 64}, position = Pos {nChars = 9448, line = 201, col = 67}})) "lws" []) (1,Nothing),Call (Fwd (Range {anchor = Pos {nChars = 9450, line = 201, col = 69}, position = Pos {nChars = 9461, line = 201, col = 80}})) "Rule.Seq" [Call (Fwd (Range {anchor = Pos {nChars = 9459, line = 201, col = 78}, position = Pos {nChars = 9460, line = 201, col = 79}})) "f" []]]),Ctor (Fwd (Range {anchor = Pos {nChars = 9468, line = 202, col = 7}, position = Pos {nChars = 9476, line = 202, col = 15}})) "rule-seq" (Seq (Fwd (Range {anchor = Pos {nChars = 9478, line = 202, col = 17}, position = Pos {nChars = 9515, line = 202, col = 54}})) [Call (Fwd (Range {anchor = Pos {nChars = 9478, line = 202, col = 17}, position = Pos {nChars = 9492, line = 202, col = 31}})) "Rule.Factor" [Call (Fwd (Range {anchor = Pos {nChars = 9490, line = 202, col = 29}, position = Pos {nChars = 9491, line = 202, col = 30}})) "f" []],Rep (Fwd (Range {anchor = Pos {nChars = 9493, line = 202, col = 32}, position = Pos {nChars = 9515, line = 202, col = 54}})) (Seq (Fwd (Range {anchor = Pos {nChars = 9494, line = 202, col = 33}, position = Pos {nChars = 9513, line = 202, col = 52}})) [Rep (Fwd (Range {anchor = Pos {nChars = 9494, line = 202, col = 33}, position = Pos {nChars = 9498, line = 202, col = 37}})) (Call (Fwd (Range {anchor = Pos {nChars = 9494, line = 202, col = 33}, position = Pos {nChars = 9497, line = 202, col = 36}})) "lws" []) (1,Nothing),Call (Fwd (Range {anchor = Pos {nChars = 9499, line = 202, col = 38}, position = Pos {nChars = 9513, line = 202, col = 52}})) "Rule.Factor" [Call (Fwd (Range {anchor = Pos {nChars = 9511, line = 202, col = 50}, position = Pos {nChars = 9512, line = 202, col = 51}})) "f" []]]) (1,Nothing)]),Call (Fwd (Range {anchor = Pos {nChars = 9522, line = 203, col = 7}, position = Pos {nChars = 9536, line = 203, col = 21}})) "Rule.Factor" [Call (Fwd (Range {anchor = Pos {nChars = 9534, line = 203, col = 19}, position = Pos {nChars = 9535, line = 203, col = 20}})) "f" []]]),(Fwd (Range {anchor = Pos {nChars = 9612, line = 207, col = 3}, position = Pos {nChars = 9687, line = 209, col = 18}}),(Fwd (Range {anchor = Pos {nChars = 9612, line = 207, col = 3}, position = Pos {nChars = 9624, line = 207, col = 15}}),"Rule.Term",["f"]),Alt (Fwd (Range {anchor = Pos {nChars = 9631, line = 208, col = 7}, position = Pos {nChars = 9687, line = 209, col = 18}})) [Ctor (Fwd (Range {anchor = Pos {nChars = 9631, line = 208, col = 7}, position = Pos {nChars = 9640, line = 208, col = 16}})) "rule-ctor" (Seq (Fwd (Range {anchor = Pos {nChars = 9642, line = 208, col = 18}, position = Pos {nChars = 9669, line = 208, col = 45}})) [Call (Fwd (Range {anchor = Pos {nChars = 9642, line = 208, col = 18}, position = Pos {nChars = 9651, line = 208, col = 27}})) "Name.ctor" [],Call (Fwd (Range {anchor = Pos {nChars = 9652, line = 208, col = 28}, position = Pos {nChars = 9657, line = 208, col = 33}})) "colon" [],Call (Fwd (Range {anchor = Pos {nChars = 9658, line = 208, col = 34}, position = Pos {nChars = 9669, line = 208, col = 45}})) "Rule.Seq" [Call (Fwd (Range {anchor = Pos {nChars = 9667, line = 208, col = 43}, position = Pos {nChars = 9668, line = 208, col = 44}})) "f" []]]),Call (Fwd (Range {anchor = Pos {nChars = 9676, line = 209, col = 7}, position = Pos {nChars = 9687, line = 209, col = 18}})) "Rule.Seq" [Call (Fwd (Range {anchor = Pos {nChars = 9685, line = 209, col = 16}, position = Pos {nChars = 9686, line = 209, col = 17}})) "f" []]]),(Fwd (Range {anchor = Pos {nChars = 9809, line = 214, col = 3}, position = Pos {nChars = 9894, line = 216, col = 19}}),(Fwd (Range {anchor = Pos {nChars = 9809, line = 214, col = 3}, position = Pos {nChars = 9816, line = 214, col = 10}}),"Rule",["f"]),Alt (Fwd (Range {anchor = Pos {nChars = 9823, line = 215, col = 7}, position = Pos {nChars = 9894, line = 216, col = 19}})) [Ctor (Fwd (Range {anchor = Pos {nChars = 9823, line = 215, col = 7}, position = Pos {nChars = 9831, line = 215, col = 15}})) "rule-alt" (Seq (Fwd (Range {anchor = Pos {nChars = 9833, line = 215, col = 17}, position = Pos {nChars = 9875, line = 215, col = 59}})) [Call (Fwd (Range {anchor = Pos {nChars = 9833, line = 215, col = 17}, position = Pos {nChars = 9845, line = 215, col = 29}})) "Rule.Term" [Call (Fwd (Range {anchor = Pos {nChars = 9843, line = 215, col = 27}, position = Pos {nChars = 9844, line = 215, col = 28}})) "f" []],Rep (Fwd (Range {anchor = Pos {nChars = 9846, line = 215, col = 30}, position = Pos {nChars = 9875, line = 215, col = 59}})) (Seq (Fwd (Range {anchor = Pos {nChars = 9847, line = 215, col = 31}, position = Pos {nChars = 9873, line = 215, col = 57}})) [Rep (Fwd (Range {anchor = Pos {nChars = 9847, line = 215, col = 31}, position = Pos {nChars = 9851, line = 215, col = 35}})) (Call (Fwd (Range {anchor = Pos {nChars = 9847, line = 215, col = 31}, position = Pos {nChars = 9850, line = 215, col = 34}})) "lws" []) (1,Nothing),Char (Fwd (Range {anchor = Pos {nChars = 9852, line = 215, col = 36}, position = Pos {nChars = 9855, line = 215, col = 39}})) '|',Rep (Fwd (Range {anchor = Pos {nChars = 9856, line = 215, col = 40}, position = Pos {nChars = 9860, line = 215, col = 44}})) (Call (Fwd (Range {anchor = Pos {nChars = 9856, line = 215, col = 40}, position = Pos {nChars = 9859, line = 215, col = 43}})) "lws" []) (1,Nothing),Call (Fwd (Range {anchor = Pos {nChars = 9861, line = 215, col = 45}, position = Pos {nChars = 9873, line = 215, col = 57}})) "Rule.Term" [Call (Fwd (Range {anchor = Pos {nChars = 9871, line = 215, col = 55}, position = Pos {nChars = 9872, line = 215, col = 56}})) "f" []]]) (1,Nothing)]),Call (Fwd (Range {anchor = Pos {nChars = 9882, line = 216, col = 7}, position = Pos {nChars = 9894, line = 216, col = 19}})) "Rule.Term" [Call (Fwd (Range {anchor = Pos {nChars = 9892, line = 216, col = 17}, position = Pos {nChars = 9893, line = 216, col = 18}})) "f" []]]),(Fwd (Range {anchor = Pos {nChars = 10098, line = 224, col = 3}, position = Pos {nChars = 10155, line = 224, col = 60}}),(Fwd (Range {anchor = Pos {nChars = 10098, line = 224, col = 3}, position = Pos {nChars = 10103, line = 224, col = 8}}),"Class",[]),Seq (Fwd (Range {anchor = Pos {nChars = 10106, line = 224, col = 11}, position = Pos {nChars = 10155, line = 224, col = 60}})) [Call (Fwd (Range {anchor = Pos {nChars = 10106, line = 224, col = 11}, position = Pos {nChars = 10116, line = 224, col = 21}})) "Class.term" [],Rep (Fwd (Range {anchor = Pos {nChars = 10117, line = 224, col = 22}, position = Pos {nChars = 10155, line = 224, col = 60}})) (Seq (Fwd (Range {anchor = Pos {nChars = 10118, line = 224, col = 23}, position = Pos {nChars = 10153, line = 224, col = 58}})) [Rep (Fwd (Range {anchor = Pos {nChars = 10118, line = 224, col = 23}, position = Pos {nChars = 10122, line = 224, col = 27}})) (Call (Fwd (Range {anchor = Pos {nChars = 10118, line = 224, col = 23}, position = Pos {nChars = 10121, line = 224, col = 26}})) "lws" []) (1,Nothing),Call (Fwd (Range {anchor = Pos {nChars = 10123, line = 224, col = 28}, position = Pos {nChars = 10137, line = 224, col = 42}})) "Class.operator" [],Rep (Fwd (Range {anchor = Pos {nChars = 10138, line = 224, col = 43}, position = Pos {nChars = 10142, line = 224, col = 47}})) (Call (Fwd (Range {anchor = Pos {nChars = 10138, line = 224, col = 43}, position = Pos {nChars = 10141, line = 224, col = 46}})) "lws" []) (1,Nothing),Call (Fwd (Range {anchor = Pos {nChars = 10143, line = 224, col = 48}, position = Pos {nChars = 10153, line = 224, col = 58}})) "Class.term" []]) (0,Nothing)]),(Fwd (Range {anchor = Pos {nChars = 10158, line = 225, col = 3}, position = Pos {nChars = 10184, line = 225, col = 29}}),(Fwd (Range {anchor = Pos {nChars = 10158, line = 225, col = 3}, position = Pos {nChars = 10172, line = 225, col = 17}}),"Class.operator",[]),Alt (Fwd (Range {anchor = Pos {nChars = 10175, line = 225, col = 20}, position = Pos {nChars = 10184, line = 225, col = 29}})) [Char (Fwd (Range {anchor = Pos {nChars = 10175, line = 225, col = 20}, position = Pos {nChars = 10178, line = 225, col = 23}})) '|',Char (Fwd (Range {anchor = Pos {nChars = 10181, line = 225, col = 26}, position = Pos {nChars = 10184, line = 225, col = 29}})) '-']),(Fwd (Range {anchor = Pos {nChars = 10442, line = 233, col = 3}, position = Pos {nChars = 10628, line = 237, col = 37}}),(Fwd (Range {anchor = Pos {nChars = 10442, line = 233, col = 3}, position = Pos {nChars = 10452, line = 233, col = 13}}),"Class.term",[]),Alt (Fwd (Range {anchor = Pos {nChars = 10459, line = 234, col = 7}, position = Pos {nChars = 10628, line = 237, col = 37}})) [Ctor (Fwd (Range {anchor = Pos {nChars = 10459, line = 234, col = 7}, position = Pos {nChars = 10468, line = 234, col = 16}})) "class-var" (Call (Fwd (Range {anchor = Pos {nChars = 10470, line = 234, col = 18}, position = Pos {nChars = 10495, line = 234, col = 43}})) "enclose.colon" [Call (Fwd (Range {anchor = Pos {nChars = 10484, line = 234, col = 32}, position = Pos {nChars = 10494, line = 234, col = 42}})) "Name.class" []]),Ctor (Fwd (Range {anchor = Pos {nChars = 10502, line = 235, col = 7}, position = Pos {nChars = 10513, line = 235, col = 18}})) "class-range" (Seq (Fwd (Range {anchor = Pos {nChars = 10515, line = 235, col = 20}, position = Pos {nChars = 10555, line = 235, col = 60}})) [Char (Fwd (Range {anchor = Pos {nChars = 10515, line = 235, col = 20}, position = Pos {nChars = 10519, line = 235, col = 24}})) '\'',Call (Fwd (Range {anchor = Pos {nChars = 10520, line = 235, col = 25}, position = Pos {nChars = 10527, line = 235, col = 32}})) "char.sq" [],Char (Fwd (Range {anchor = Pos {nChars = 10528, line = 235, col = 33}, position = Pos {nChars = 10532, line = 235, col = 37}})) '\'',Str (Fwd (Range {anchor = Pos {nChars = 10533, line = 235, col = 38}, position = Pos {nChars = 10537, line = 235, col = 42}})) "..",Char (Fwd (Range {anchor = Pos {nChars = 10538, line = 235, col = 43}, position = Pos {nChars = 10542, line = 235, col = 47}})) '\'',Call (Fwd (Range {anchor = Pos {nChars = 10543, line = 235, col = 48}, position = Pos {nChars = 10550, line = 235, col = 55}})) "char.sq" [],Char (Fwd (Range {anchor = Pos {nChars = 10551, line = 235, col = 56}, position = Pos {nChars = 10555, line = 235, col = 60}})) '\'']),Ctor (Fwd (Range {anchor = Pos {nChars = 10562, line = 236, col = 7}, position = Pos {nChars = 10572, line = 236, col = 17}})) "class-char" (Seq (Fwd (Range {anchor = Pos {nChars = 10574, line = 236, col = 19}, position = Pos {nChars = 10591, line = 236, col = 36}})) [Char (Fwd (Range {anchor = Pos {nChars = 10574, line = 236, col = 19}, position = Pos {nChars = 10578, line = 236, col = 23}})) '\'',Call (Fwd (Range {anchor = Pos {nChars = 10579, line = 236, col = 24}, position = Pos {nChars = 10586, line = 236, col = 31}})) "char.sq" [],Char (Fwd (Range {anchor = Pos {nChars = 10587, line = 236, col = 32}, position = Pos {nChars = 10591, line = 236, col = 36}})) '\'']),Ctor (Fwd (Range {anchor = Pos {nChars = 10598, line = 237, col = 7}, position = Pos {nChars = 10607, line = 237, col = 16}})) "class-set" (Seq (Fwd (Range {anchor = Pos {nChars = 10609, line = 237, col = 18}, position = Pos {nChars = 10628, line = 237, col = 37}})) [Char (Fwd (Range {anchor = Pos {nChars = 10609, line = 237, col = 18}, position = Pos {nChars = 10613, line = 237, col = 22}})) '"',Rep (Fwd (Range {anchor = Pos {nChars = 10614, line = 237, col = 23}, position = Pos {nChars = 10623, line = 237, col = 32}})) (Call (Fwd (Range {anchor = Pos {nChars = 10614, line = 237, col = 23}, position = Pos {nChars = 10622, line = 237, col = 31}})) "chars.dq" []) (0,Nothing),Char (Fwd (Range {anchor = Pos {nChars = 10624, line = 237, col = 33}, position = Pos {nChars = 10628, line = 237, col = 37}})) '"'])]),(Fwd (Range {anchor = Pos {nChars = 11122, line = 250, col = 3}, position = Pos {nChars = 11165, line = 252, col = 18}}),(Fwd (Range {anchor = Pos {nChars = 11122, line = 250, col = 3}, position = Pos {nChars = 11129, line = 250, col = 10}}),"char.sq",[]),Alt (Fwd (Range {anchor = Pos {nChars = 11136, line = 251, col = 7}, position = Pos {nChars = 11165, line = 252, col = 18}})) [Sat (Fwd (Range {anchor = Pos {nChars = 11136, line = 251, col = 7}, position = Pos {nChars = 11147, line = 251, col = 18}})) [SatVar (Fwd (Range {anchor = Pos {nChars = 11137, line = 251, col = 8}, position = Pos {nChars = 11146, line = 251, col = 17}})) "char.sq"],Call (Fwd (Range {anchor = Pos {nChars = 11154, line = 252, col = 7}, position = Pos {nChars = 11165, line = 252, col = 18}})) "char.escape" []]),(Fwd (Range {anchor = Pos {nChars = 11202, line = 255, col = 3}, position = Pos {nChars = 11249, line = 257, col = 18}}),(Fwd (Range {anchor = Pos {nChars = 11202, line = 255, col = 3}, position = Pos {nChars = 11210, line = 255, col = 11}}),"chars.dq",[]),Alt (Fwd (Range {anchor = Pos {nChars = 11217, line = 256, col = 7}, position = Pos {nChars = 11249, line = 257, col = 18}})) [Flat (Fwd (Range {anchor = Pos {nChars = 11217, line = 256, col = 7}, position = Pos {nChars = 11231, line = 256, col = 21}})) (Rep (Fwd (Range {anchor = Pos {nChars = 11218, line = 256, col = 8}, position = Pos {nChars = 11230, line = 256, col = 20}})) (Sat (Fwd (Range {anchor = Pos {nChars = 11218, line = 256, col = 8}, position = Pos {nChars = 11229, line = 256, col = 19}})) [SatVar (Fwd (Range {anchor = Pos {nChars = 11219, line = 256, col = 9}, position = Pos {nChars = 11228, line = 256, col = 18}})) "char.dq"]) (1,Nothing)),Call (Fwd (Range {anchor = Pos {nChars = 11238, line = 257, col = 7}, position = Pos {nChars = 11249, line = 257, col = 18}})) "char.escape" []]),(Fwd (Range {anchor = Pos {nChars = 11596, line = 266, col = 3}, position = Pos {nChars = 11930, line = 274, col = 49}}),(Fwd (Range {anchor = Pos {nChars = 11596, line = 266, col = 3}, position = Pos {nChars = 11607, line = 266, col = 14}}),"char.escape",[]),Alt (Fwd (Range {anchor = Pos {nChars = 11614, line = 267, col = 7}, position = Pos {nChars = 11930, line = 274, col = 49}})) [Ctor (Fwd (Range {anchor = Pos {nChars = 11614, line = 267, col = 7}, position = Pos {nChars = 11625, line = 267, col = 18}})) "char-escape" (Flat (Fwd (Range {anchor = Pos {nChars = 11627, line = 267, col = 20}, position = Pos {nChars = 11653, line = 267, col = 46}})) (Seq (Fwd (Range {anchor = Pos {nChars = 11629, line = 267, col = 22}, position = Pos {nChars = 11651, line = 267, col = 44}})) [Char (Fwd (Range {anchor = Pos {nChars = 11629, line = 267, col = 22}, position = Pos {nChars = 11633, line = 267, col = 26}})) '\\',Sat (Fwd (Range {anchor = Pos {nChars = 11634, line = 267, col = 27}, position = Pos {nChars = 11651, line = 267, col = 44}})) [SatVar (Fwd (Range {anchor = Pos {nChars = 11635, line = 267, col = 28}, position = Pos {nChars = 11650, line = 267, col = 43}})) "char.escape.c"]])),Ctor (Fwd (Range {anchor = Pos {nChars = 11660, line = 268, col = 7}, position = Pos {nChars = 11671, line = 268, col = 18}})) "char-escape" (Seq (Fwd (Range {anchor = Pos {nChars = 11673, line = 268, col = 20}, position = Pos {nChars = 11697, line = 268, col = 44}})) [Str (Fwd (Range {anchor = Pos {nChars = 11673, line = 268, col = 20}, position = Pos {nChars = 11678, line = 268, col = 25}})) "\\x",Flat (Fwd (Range {anchor = Pos {nChars = 11679, line = 268, col = 26}, position = Pos {nChars = 11697, line = 268, col = 44}})) (Rep (Fwd (Range {anchor = Pos {nChars = 11680, line = 268, col = 27}, position = Pos {nChars = 11696, line = 268, col = 43}})) (Sat (Fwd (Range {anchor = Pos {nChars = 11680, line = 268, col = 27}, position = Pos {nChars = 11693, line = 268, col = 40}})) [SatVar (Fwd (Range {anchor = Pos {nChars = 11681, line = 268, col = 28}, position = Pos {nChars = 11692, line = 268, col = 39}})) "digit.hex"]) (2,Just 2))]),Ctor (Fwd (Range {anchor = Pos {nChars = 11704, line = 269, col = 7}, position = Pos {nChars = 11715, line = 269, col = 18}})) "char-escape" (Seq (Fwd (Range {anchor = Pos {nChars = 11717, line = 269, col = 20}, position = Pos {nChars = 11741, line = 269, col = 44}})) [Str (Fwd (Range {anchor = Pos {nChars = 11717, line = 269, col = 20}, position = Pos {nChars = 11722, line = 269, col = 25}})) "\\u",Flat (Fwd (Range {anchor = Pos {nChars = 11723, line = 269, col = 26}, position = Pos {nChars = 11741, line = 269, col = 44}})) (Rep (Fwd (Range {anchor = Pos {nChars = 11724, line = 269, col = 27}, position = Pos {nChars = 11740, line = 269, col = 43}})) (Sat (Fwd (Range {anchor = Pos {nChars = 11724, line = 269, col = 27}, position = Pos {nChars = 11737, line = 269, col = 40}})) [SatVar (Fwd (Range {anchor = Pos {nChars = 11725, line = 269, col = 28}, position = Pos {nChars = 11736, line = 269, col = 39}})) "digit.hex"]) (4,Just 4))]),Ctor (Fwd (Range {anchor = Pos {nChars = 11748, line = 270, col = 7}, position = Pos {nChars = 11759, line = 270, col = 18}})) "char-escape" (Seq (Fwd (Range {anchor = Pos {nChars = 11761, line = 270, col = 20}, position = Pos {nChars = 11881, line = 273, col = 24}})) [Str (Fwd (Range {anchor = Pos {nChars = 11761, line = 270, col = 20}, position = Pos {nChars = 11766, line = 270, col = 25}})) "\\U",Flat (Fwd (Range {anchor = Pos {nChars = 11789, line = 271, col = 23}, position = Pos {nChars = 11881, line = 273, col = 24}})) (Alt (Fwd (Range {anchor = Pos {nChars = 11791, line = 271, col = 25}, position = Pos {nChars = 11857, line = 272, col = 46}})) [Seq (Fwd (Range {anchor = Pos {nChars = 11791, line = 271, col = 25}, position = Pos {nChars = 11811, line = 271, col = 45}})) [Char (Fwd (Range {anchor = Pos {nChars = 11791, line = 271, col = 25}, position = Pos {nChars = 11794, line = 271, col = 28}})) '0',Rep (Fwd (Range {anchor = Pos {nChars = 11795, line = 271, col = 29}, position = Pos {nChars = 11811, line = 271, col = 45}})) (Sat (Fwd (Range {anchor = Pos {nChars = 11795, line = 271, col = 29}, position = Pos {nChars = 11808, line = 271, col = 42}})) [SatVar (Fwd (Range {anchor = Pos {nChars = 11796, line = 271, col = 30}, position = Pos {nChars = 11807, line = 271, col = 41}})) "digit.hex"]) (5,Just 5)],Seq (Fwd (Range {anchor = Pos {nChars = 11836, line = 272, col = 25}, position = Pos {nChars = 11857, line = 272, col = 46}})) [Str (Fwd (Range {anchor = Pos {nChars = 11836, line = 272, col = 25}, position = Pos {nChars = 11840, line = 272, col = 29}})) "10",Rep (Fwd (Range {anchor = Pos {nChars = 11841, line = 272, col = 30}, position = Pos {nChars = 11857, line = 272, col = 46}})) (Sat (Fwd (Range {anchor = Pos {nChars = 11841, line = 272, col = 30}, position = Pos {nChars = 11854, line = 272, col = 43}})) [SatVar (Fwd (Range {anchor = Pos {nChars = 11842, line = 272, col = 31}, position = Pos {nChars = 11853, line = 272, col = 42}})) "digit.hex"]) (4,Just 4)]])]),Ctor (Fwd (Range {anchor = Pos {nChars = 11888, line = 274, col = 7}, position = Pos {nChars = 11899, line = 274, col = 18}})) "char-escape" (Seq (Fwd (Range {anchor = Pos {nChars = 11901, line = 274, col = 20}, position = Pos {nChars = 11930, line = 274, col = 49}})) [Char (Fwd (Range {anchor = Pos {nChars = 11901, line = 274, col = 20}, position = Pos {nChars = 11905, line = 274, col = 24}})) '\\',Sat (Fwd (Range {anchor = Pos {nChars = 11906, line = 274, col = 25}, position = Pos {nChars = 11930, line = 274, col = 49}})) [SatVar (Fwd (Range {anchor = Pos {nChars = 11907, line = 274, col = 26}, position = Pos {nChars = 11929, line = 274, col = 48}})) "char.escape.passthru"]])]),(Fwd (Range {anchor = Pos {nChars = 12691, line = 293, col = 3}, position = Pos {nChars = 12752, line = 293, col = 64}}),(Fwd (Range {anchor = Pos {nChars = 12691, line = 293, col = 3}, position = Pos {nChars = 12700, line = 293, col = 12}}),"Name.rule",[]),Flat (Fwd (Range {anchor = Pos {nChars = 12703, line = 293, col = 15}, position = Pos {nChars = 12752, line = 293, col = 64}})) (Call (Fwd (Range {anchor = Pos {nChars = 12705, line = 293, col = 17}, position = Pos {nChars = 12750, line = 293, col = 62}})) "sep.dot" [Seq (Fwd (Range {anchor = Pos {nChars = 12713, line = 293, col = 25}, position = Pos {nChars = 12749, line = 293, col = 61}})) [Sat (Fwd (Range {anchor = Pos {nChars = 12713, line = 293, col = 25}, position = Pos {nChars = 12728, line = 293, col = 40}})) [SatVar (Fwd (Range {anchor = Pos {nChars = 12714, line = 293, col = 26}, position = Pos {nChars = 12727, line = 293, col = 39}})) "ascii.alpha"],Rep (Fwd (Range {anchor = Pos {nChars = 12729, line = 293, col = 41}, position = Pos {nChars = 12749, line = 293, col = 61}})) (Sat (Fwd (Range {anchor = Pos {nChars = 12729, line = 293, col = 41}, position = Pos {nChars = 12748, line = 293, col = 60}})) [SatVar (Fwd (Range {anchor = Pos {nChars = 12730, line = 293, col = 42}, position = Pos {nChars = 12747, line = 293, col = 59}})) "ascii.alpha-num"]) (0,Nothing)]])),(Fwd (Range {anchor = Pos {nChars = 12757, line = 295, col = 3}, position = Pos {nChars = 12810, line = 295, col = 56}}),(Fwd (Range {anchor = Pos {nChars = 12757, line = 295, col = 3}, position = Pos {nChars = 12767, line = 295, col = 13}}),"Name.param",[]),Flat (Fwd (Range {anchor = Pos {nChars = 12770, line = 295, col = 16}, position = Pos {nChars = 12810, line = 295, col = 56}})) (Seq (Fwd (Range {anchor = Pos {nChars = 12772, line = 295, col = 18}, position = Pos {nChars = 12808, line = 295, col = 54}})) [Sat (Fwd (Range {anchor = Pos {nChars = 12772, line = 295, col = 18}, position = Pos {nChars = 12787, line = 295, col = 33}})) [SatVar (Fwd (Range {anchor = Pos {nChars = 12773, line = 295, col = 19}, position = Pos {nChars = 12786, line = 295, col = 32}})) "ascii.alpha"],Rep (Fwd (Range {anchor = Pos {nChars = 12788, line = 295, col = 34}, position = Pos {nChars = 12808, line = 295, col = 54}})) (Sat (Fwd (Range {anchor = Pos {nChars = 12788, line = 295, col = 34}, position = Pos {nChars = 12807, line = 295, col = 53}})) [SatVar (Fwd (Range {anchor = Pos {nChars = 12789, line = 295, col = 35}, position = Pos {nChars = 12806, line = 295, col = 52}})) "ascii.alpha-num"]) (0,Nothing)])),(Fwd (Range {anchor = Pos {nChars = 12884, line = 298, col = 3}, position = Pos {nChars = 12946, line = 298, col = 65}}),(Fwd (Range {anchor = Pos {nChars = 12884, line = 298, col = 3}, position = Pos {nChars = 12893, line = 298, col = 12}}),"Name.ctor",[]),Flat (Fwd (Range {anchor = Pos {nChars = 12896, line = 298, col = 15}, position = Pos {nChars = 12946, line = 298, col = 65}})) (Call (Fwd (Range {anchor = Pos {nChars = 12898, line = 298, col = 17}, position = Pos {nChars = 12944, line = 298, col = 63}})) "sep.dash" [Seq (Fwd (Range {anchor = Pos {nChars = 12907, line = 298, col = 26}, position = Pos {nChars = 12943, line = 298, col = 62}})) [Sat (Fwd (Range {anchor = Pos {nChars = 12907, line = 298, col = 26}, position = Pos {nChars = 12922, line = 298, col = 41}})) [SatVar (Fwd (Range {anchor = Pos {nChars = 12908, line = 298, col = 27}, position = Pos {nChars = 12921, line = 298, col = 40}})) "ascii.alpha"],Rep (Fwd (Range {anchor = Pos {nChars = 12923, line = 298, col = 42}, position = Pos {nChars = 12943, line = 298, col = 62}})) (Sat (Fwd (Range {anchor = Pos {nChars = 12923, line = 298, col = 42}, position = Pos {nChars = 12942, line = 298, col = 61}})) [SatVar (Fwd (Range {anchor = Pos {nChars = 12924, line = 298, col = 43}, position = Pos {nChars = 12941, line = 298, col = 60}})) "ascii.alpha-num"]) (0,Nothing)]])),(Fwd (Range {anchor = Pos {nChars = 12951, line = 300, col = 3}, position = Pos {nChars = 13017, line = 300, col = 69}}),(Fwd (Range {anchor = Pos {nChars = 12951, line = 300, col = 3}, position = Pos {nChars = 12961, line = 300, col = 13}}),"Name.class",[]),Flat (Fwd (Range {anchor = Pos {nChars = 12964, line = 300, col = 16}, position = Pos {nChars = 13017, line = 300, col = 69}})) (Call (Fwd (Range {anchor = Pos {nChars = 12966, line = 300, col = 18}, position = Pos {nChars = 13015, line = 300, col = 67}})) "sep.dot" [Seq (Fwd (Range {anchor = Pos {nChars = 12974, line = 300, col = 26}, position = Pos {nChars = 13014, line = 300, col = 66}})) [Sat (Fwd (Range {anchor = Pos {nChars = 12974, line = 300, col = 26}, position = Pos {nChars = 12989, line = 300, col = 41}})) [SatVar (Fwd (Range {anchor = Pos {nChars = 12975, line = 300, col = 27}, position = Pos {nChars = 12988, line = 300, col = 40}})) "ascii.alpha"],Rep (Fwd (Range {anchor = Pos {nChars = 12990, line = 300, col = 42}, position = Pos {nChars = 13014, line = 300, col = 66}})) (Sat (Fwd (Range {anchor = Pos {nChars = 12990, line = 300, col = 42}, position = Pos {nChars = 13013, line = 300, col = 65}})) [SatVar (Fwd (Range {anchor = Pos {nChars = 12991, line = 300, col = 43}, position = Pos {nChars = 13008, line = 300, col = 60}})) "ascii.alpha-num",SatChar (Fwd (Range {anchor = Pos {nChars = 13008, line = 300, col = 60}, position = Pos {nChars = 13012, line = 300, col = 64}})) '-']) (0,Nothing)]])),(Fwd (Range {anchor = Pos {nChars = 13537, line = 319, col = 3}, position = Pos {nChars = 13571, line = 319, col = 37}}),(Fwd (Range {anchor = Pos {nChars = 13537, line = 319, col = 3}, position = Pos {nChars = 13544, line = 319, col = 10}}),"num.nat",[]),Flat (Fwd (Range {anchor = Pos {nChars = 13547, line = 319, col = 13}, position = Pos {nChars = 13571, line = 319, col = 37}})) (Seq (Fwd (Range {anchor = Pos {nChars = 13549, line = 319, col = 15}, position = Pos {nChars = 13569, line = 319, col = 35}})) [Sat (Fwd (Range {anchor = Pos {nChars = 13549, line = 319, col = 15}, position = Pos {nChars = 13558, line = 319, col = 24}})) [SatVar (Fwd (Range {anchor = Pos {nChars = 13550, line = 319, col = 16}, position = Pos {nChars = 13557, line = 319, col = 23}})) "digit"],Rep (Fwd (Range {anchor = Pos {nChars = 13559, line = 319, col = 25}, position = Pos {nChars = 13569, line = 319, col = 35}})) (Sat (Fwd (Range {anchor = Pos {nChars = 13559, line = 319, col = 25}, position = Pos {nChars = 13568, line = 319, col = 34}})) [SatVar (Fwd (Range {anchor = Pos {nChars = 13560, line = 319, col = 26}, position = Pos {nChars = 13567, line = 319, col = 33}})) "digit"]) (0,Nothing)])),(Fwd (Range {anchor = Pos {nChars = 13772, line = 326, col = 3}, position = Pos {nChars = 13804, line = 326, col = 35}}),(Fwd (Range {anchor = Pos {nChars = 13772, line = 326, col = 3}, position = Pos {nChars = 13786, line = 326, col = 17}}),"enclose",["o","i","c"]),Seq (Fwd (Range {anchor = Pos {nChars = 13789, line = 326, col = 20}, position = Pos {nChars = 13804, line = 326, col = 35}})) [Call (Fwd (Range {anchor = Pos {nChars = 13789, line = 326, col = 20}, position = Pos {nChars = 13790, line = 326, col = 21}})) "o" [],Rep (Fwd (Range {anchor = Pos {nChars = 13791, line = 326, col = 22}, position = Pos {nChars = 13795, line = 326, col = 26}})) (Call (Fwd (Range {anchor = Pos {nChars = 13791, line = 326, col = 22}, position = Pos {nChars = 13794, line = 326, col = 25}})) "lws" []) (0,Nothing),Call (Fwd (Range {anchor = Pos {nChars = 13796, line = 326, col = 27}, position = Pos {nChars = 13797, line = 326, col = 28}})) "i" [],Rep (Fwd (Range {anchor = Pos {nChars = 13798, line = 326, col = 29}, position = Pos {nChars = 13802, line = 326, col = 33}})) (Call (Fwd (Range {anchor = Pos {nChars = 13798, line = 326, col = 29}, position = Pos {nChars = 13801, line = 326, col = 32}})) "lws" []) (0,Nothing),Call (Fwd (Range {anchor = Pos {nChars = 13803, line = 326, col = 34}, position = Pos {nChars = 13804, line = 326, col = 35}})) "c" []]),(Fwd (Range {anchor = Pos {nChars = 13809, line = 328, col = 3}, position = Pos {nChars = 13847, line = 328, col = 41}}),(Fwd (Range {anchor = Pos {nChars = 13809, line = 328, col = 3}, position = Pos {nChars = 13826, line = 328, col = 20}}),"enclose.parens",["i"]),Call (Fwd (Range {anchor = Pos {nChars = 13829, line = 328, col = 23}, position = Pos {nChars = 13847, line = 328, col = 41}})) "enclose" [Char (Fwd (Range {anchor = Pos {nChars = 13837, line = 328, col = 31}, position = Pos {nChars = 13840, line = 328, col = 34}})) '(',Call (Fwd (Range {anchor = Pos {nChars = 13841, line = 328, col = 35}, position = Pos {nChars = 13842, line = 328, col = 36}})) "i" [],Char (Fwd (Range {anchor = Pos {nChars = 13843, line = 328, col = 37}, position = Pos {nChars = 13846, line = 328, col = 40}})) ')']),(Fwd (Range {anchor = Pos {nChars = 13850, line = 329, col = 3}, position = Pos {nChars = 13888, line = 329, col = 41}}),(Fwd (Range {anchor = Pos {nChars = 13850, line = 329, col = 3}, position = Pos {nChars = 13867, line = 329, col = 20}}),"enclose.braces",["i"]),Call (Fwd (Range {anchor = Pos {nChars = 13870, line = 329, col = 23}, position = Pos {nChars = 13888, line = 329, col = 41}})) "enclose" [Char (Fwd (Range {anchor = Pos {nChars = 13878, line = 329, col = 31}, position = Pos {nChars = 13881, line = 329, col = 34}})) '{',Call (Fwd (Range {anchor = Pos {nChars = 13882, line = 329, col = 35}, position = Pos {nChars = 13883, line = 329, col = 36}})) "i" [],Char (Fwd (Range {anchor = Pos {nChars = 13884, line = 329, col = 37}, position = Pos {nChars = 13887, line = 329, col = 40}})) '}']),(Fwd (Range {anchor = Pos {nChars = 13891, line = 330, col = 3}, position = Pos {nChars = 13929, line = 330, col = 41}}),(Fwd (Range {anchor = Pos {nChars = 13891, line = 330, col = 3}, position = Pos {nChars = 13908, line = 330, col = 20}}),"enclose.angles",["i"]),Call (Fwd (Range {anchor = Pos {nChars = 13911, line = 330, col = 23}, position = Pos {nChars = 13929, line = 330, col = 41}})) "enclose" [Char (Fwd (Range {anchor = Pos {nChars = 13919, line = 330, col = 31}, position = Pos {nChars = 13922, line = 330, col = 34}})) '<',Call (Fwd (Range {anchor = Pos {nChars = 13923, line = 330, col = 35}, position = Pos {nChars = 13924, line = 330, col = 36}})) "i" [],Char (Fwd (Range {anchor = Pos {nChars = 13925, line = 330, col = 37}, position = Pos {nChars = 13928, line = 330, col = 40}})) '>']),(Fwd (Range {anchor = Pos {nChars = 13932, line = 331, col = 3}, position = Pos {nChars = 13969, line = 331, col = 40}}),(Fwd (Range {anchor = Pos {nChars = 13932, line = 331, col = 3}, position = Pos {nChars = 13948, line = 331, col = 19}}),"enclose.colon",["i"]),Call (Fwd (Range {anchor = Pos {nChars = 13951, line = 331, col = 22}, position = Pos {nChars = 13969, line = 331, col = 40}})) "enclose" [Char (Fwd (Range {anchor = Pos {nChars = 13959, line = 331, col = 30}, position = Pos {nChars = 13962, line = 331, col = 33}})) ':',Call (Fwd (Range {anchor = Pos {nChars = 13963, line = 331, col = 34}, position = Pos {nChars = 13964, line = 331, col = 35}})) "i" [],Char (Fwd (Range {anchor = Pos {nChars = 13965, line = 331, col = 36}, position = Pos {nChars = 13968, line = 331, col = 39}})) ':']),(Fwd (Range {anchor = Pos {nChars = 13973, line = 333, col = 3}, position = Pos {nChars = 13995, line = 333, col = 25}}),(Fwd (Range {anchor = Pos {nChars = 13973, line = 333, col = 3}, position = Pos {nChars = 13984, line = 333, col = 14}}),"sep.by",["e","s"]),Seq (Fwd (Range {anchor = Pos {nChars = 13987, line = 333, col = 17}, position = Pos {nChars = 13995, line = 333, col = 25}})) [Call (Fwd (Range {anchor = Pos {nChars = 13987, line = 333, col = 17}, position = Pos {nChars = 13988, line = 333, col = 18}})) "e" [],Rep (Fwd (Range {anchor = Pos {nChars = 13989, line = 333, col = 19}, position = Pos {nChars = 13995, line = 333, col = 25}})) (Seq (Fwd (Range {anchor = Pos {nChars = 13990, line = 333, col = 20}, position = Pos {nChars = 13993, line = 333, col = 23}})) [Call (Fwd (Range {anchor = Pos {nChars = 13990, line = 333, col = 20}, position = Pos {nChars = 13991, line = 333, col = 21}})) "s" [],Call (Fwd (Range {anchor = Pos {nChars = 13992, line = 333, col = 22}, position = Pos {nChars = 13993, line = 333, col = 23}})) "e" []]) (0,Nothing)]),(Fwd (Range {anchor = Pos {nChars = 14000, line = 335, col = 3}, position = Pos {nChars = 14030, line = 335, col = 33}}),(Fwd (Range {anchor = Pos {nChars = 14000, line = 335, col = 3}, position = Pos {nChars = 14012, line = 335, col = 15}}),"sep.comma",["e"]),Call (Fwd (Range {anchor = Pos {nChars = 14015, line = 335, col = 18}, position = Pos {nChars = 14030, line = 335, col = 33}})) "sep.by" [Call (Fwd (Range {anchor = Pos {nChars = 14022, line = 335, col = 25}, position = Pos {nChars = 14023, line = 335, col = 26}})) "e" [],Call (Fwd (Range {anchor = Pos {nChars = 14024, line = 335, col = 27}, position = Pos {nChars = 14029, line = 335, col = 32}})) "comma" []]),(Fwd (Range {anchor = Pos {nChars = 14033, line = 336, col = 3}, position = Pos {nChars = 14059, line = 336, col = 29}}),(Fwd (Range {anchor = Pos {nChars = 14033, line = 336, col = 3}, position = Pos {nChars = 14043, line = 336, col = 13}}),"sep.dot",["e"]),Call (Fwd (Range {anchor = Pos {nChars = 14046, line = 336, col = 16}, position = Pos {nChars = 14059, line = 336, col = 29}})) "sep.by" [Call (Fwd (Range {anchor = Pos {nChars = 14053, line = 336, col = 23}, position = Pos {nChars = 14054, line = 336, col = 24}})) "e" [],Char (Fwd (Range {anchor = Pos {nChars = 14055, line = 336, col = 25}, position = Pos {nChars = 14058, line = 336, col = 28}})) '.']),(Fwd (Range {anchor = Pos {nChars = 14062, line = 337, col = 3}, position = Pos {nChars = 14089, line = 337, col = 30}}),(Fwd (Range {anchor = Pos {nChars = 14062, line = 337, col = 3}, position = Pos {nChars = 14073, line = 337, col = 14}}),"sep.dash",["e"]),Call (Fwd (Range {anchor = Pos {nChars = 14076, line = 337, col = 17}, position = Pos {nChars = 14089, line = 337, col = 30}})) "sep.by" [Call (Fwd (Range {anchor = Pos {nChars = 14083, line = 337, col = 24}, position = Pos {nChars = 14084, line = 337, col = 25}})) "e" [],Char (Fwd (Range {anchor = Pos {nChars = 14085, line = 337, col = 26}, position = Pos {nChars = 14088, line = 337, col = 29}})) '-']),(Fwd (Range {anchor = Pos {nChars = 14093, line = 339, col = 3}, position = Pos {nChars = 14114, line = 339, col = 24}}),(Fwd (Range {anchor = Pos {nChars = 14093, line = 339, col = 3}, position = Pos {nChars = 14098, line = 339, col = 8}}),"comma",[]),Seq (Fwd (Range {anchor = Pos {nChars = 14101, line = 339, col = 11}, position = Pos {nChars = 14114, line = 339, col = 24}})) [Rep (Fwd (Range {anchor = Pos {nChars = 14101, line = 339, col = 11}, position = Pos {nChars = 14105, line = 339, col = 15}})) (Call (Fwd (Range {anchor = Pos {nChars = 14101, line = 339, col = 11}, position = Pos {nChars = 14104, line = 339, col = 14}})) "lws" []) (0,Nothing),Char (Fwd (Range {anchor = Pos {nChars = 14106, line = 339, col = 16}, position = Pos {nChars = 14109, line = 339, col = 19}})) ',',Rep (Fwd (Range {anchor = Pos {nChars = 14110, line = 339, col = 20}, position = Pos {nChars = 14114, line = 339, col = 24}})) (Call (Fwd (Range {anchor = Pos {nChars = 14110, line = 339, col = 20}, position = Pos {nChars = 14113, line = 339, col = 23}})) "lws" []) (0,Nothing)]),(Fwd (Range {anchor = Pos {nChars = 14117, line = 340, col = 3}, position = Pos {nChars = 14138, line = 340, col = 24}}),(Fwd (Range {anchor = Pos {nChars = 14117, line = 340, col = 3}, position = Pos {nChars = 14122, line = 340, col = 8}}),"colon",[]),Seq (Fwd (Range {anchor = Pos {nChars = 14125, line = 340, col = 11}, position = Pos {nChars = 14138, line = 340, col = 24}})) [Rep (Fwd (Range {anchor = Pos {nChars = 14125, line = 340, col = 11}, position = Pos {nChars = 14129, line = 340, col = 15}})) (Call (Fwd (Range {anchor = Pos {nChars = 14125, line = 340, col = 11}, position = Pos {nChars = 14128, line = 340, col = 14}})) "lws" []) (0,Nothing),Char (Fwd (Range {anchor = Pos {nChars = 14130, line = 340, col = 16}, position = Pos {nChars = 14133, line = 340, col = 19}})) ':',Rep (Fwd (Range {anchor = Pos {nChars = 14134, line = 340, col = 20}, position = Pos {nChars = 14138, line = 340, col = 24}})) (Call (Fwd (Range {anchor = Pos {nChars = 14134, line = 340, col = 20}, position = Pos {nChars = 14137, line = 340, col = 23}})) "lws" []) (1,Nothing)])], classes = [(Fwd (Range {anchor = Pos {nChars = 11168, line = 253, col = 3}, position = Pos {nChars = 11197, line = 253, col = 32}}),(Fwd (Range {anchor = Pos {nChars = 11169, line = 253, col = 4}, position = Pos {nChars = 11176, line = 253, col = 11}}),"char.sq"),ClassMinus (ClassRange (Fwd (Range {anchor = Pos {nChars = 11180, line = 253, col = 15}, position = Pos {nChars = 11188, line = 253, col = 23}})) ' ' '~') (ClassSet (Fwd (Range {anchor = Pos {nChars = 11191, line = 253, col = 26}, position = Pos {nChars = 11197, line = 253, col = 32}})) "'\\")),(Fwd (Range {anchor = Pos {nChars = 11252, line = 258, col = 3}, position = Pos {nChars = 11281, line = 258, col = 32}}),(Fwd (Range {anchor = Pos {nChars = 11253, line = 258, col = 4}, position = Pos {nChars = 11260, line = 258, col = 11}}),"char.dq"),ClassMinus (ClassRange (Fwd (Range {anchor = Pos {nChars = 11264, line = 258, col = 15}, position = Pos {nChars = 11272, line = 258, col = 23}})) ' ' '~') (ClassSet (Fwd (Range {anchor = Pos {nChars = 11275, line = 258, col = 26}, position = Pos {nChars = 11281, line = 258, col = 32}})) "\"\\")),(Fwd (Range {anchor = Pos {nChars = 11933, line = 275, col = 3}, position = Pos {nChars = 11962, line = 275, col = 32}}),(Fwd (Range {anchor = Pos {nChars = 11934, line = 275, col = 4}, position = Pos {nChars = 11947, line = 275, col = 17}}),"char.escape.c"),ClassSet (Fwd (Range {anchor = Pos {nChars = 11951, line = 275, col = 21}, position = Pos {nChars = 11962, line = 275, col = 32}})) "0abefnrtv"),(Fwd (Range {anchor = Pos {nChars = 11965, line = 276, col = 3}, position = Pos {nChars = 12029, line = 276, col = 67}}),(Fwd (Range {anchor = Pos {nChars = 11966, line = 276, col = 4}, position = Pos {nChars = 11986, line = 276, col = 24}}),"char.escape.passthru"),ClassMinus (ClassMinus (ClassVar (Fwd (Range {anchor = Pos {nChars = 11990, line = 276, col = 28}, position = Pos {nChars = 12003, line = 276, col = 41}})) "ascii.print") (ClassVar (Fwd (Range {anchor = Pos {nChars = 12006, line = 276, col = 44}, position = Pos {nChars = 12021, line = 276, col = 59}})) "char.escape.c")) (ClassSet (Fwd (Range {anchor = Pos {nChars = 12024, line = 276, col = 62}, position = Pos {nChars = 12029, line = 276, col = 67}})) "xuU")),(Fwd (Range {anchor = Pos {nChars = 12428, line = 285, col = 3}, position = Pos {nChars = 12472, line = 285, col = 47}}),(Fwd (Range {anchor = Pos {nChars = 12429, line = 285, col = 4}, position = Pos {nChars = 12439, line = 285, col = 14}}),"char.brack"),ClassMinus (ClassVar (Fwd (Range {anchor = Pos {nChars = 12443, line = 285, col = 18}, position = Pos {nChars = 12456, line = 285, col = 31}})) "ascii.print") (ClassSet (Fwd (Range {anchor = Pos {nChars = 12459, line = 285, col = 34}, position = Pos {nChars = 12472, line = 285, col = 47}})) " []'\"-:\\")),(Fwd (Range {anchor = Pos {nChars = 13192, line = 307, col = 3}, position = Pos {nChars = 13216, line = 307, col = 27}}),(Fwd (Range {anchor = Pos {nChars = 13193, line = 307, col = 4}, position = Pos {nChars = 13204, line = 307, col = 15}}),"ascii.print"),ClassRange (Fwd (Range {anchor = Pos {nChars = 13208, line = 307, col = 19}, position = Pos {nChars = 13216, line = 307, col = 27}})) ' ' '~'),(Fwd (Range {anchor = Pos {nChars = 13220, line = 309, col = 3}, position = Pos {nChars = 13238, line = 309, col = 21}}),(Fwd (Range {anchor = Pos {nChars = 13221, line = 309, col = 4}, position = Pos {nChars = 13226, line = 309, col = 9}}),"digit"),ClassRange (Fwd (Range {anchor = Pos {nChars = 13230, line = 309, col = 13}, position = Pos {nChars = 13238, line = 309, col = 21}})) '0' '9'),(Fwd (Range {anchor = Pos {nChars = 13241, line = 310, col = 3}, position = Pos {nChars = 13284, line = 310, col = 46}}),(Fwd (Range {anchor = Pos {nChars = 13242, line = 310, col = 4}, position = Pos {nChars = 13251, line = 310, col = 13}}),"digit.hex"),ClassUnion (ClassUnion (ClassVar (Fwd (Range {anchor = Pos {nChars = 13255, line = 310, col = 17}, position = Pos {nChars = 13262, line = 310, col = 24}})) "digit") (ClassRange (Fwd (Range {anchor = Pos {nChars = 13265, line = 310, col = 27}, position = Pos {nChars = 13273, line = 310, col = 35}})) 'a' 'f')) (ClassRange (Fwd (Range {anchor = Pos {nChars = 13276, line = 310, col = 38}, position = Pos {nChars = 13284, line = 310, col = 46}})) 'A' 'F')),(Fwd (Range {anchor = Pos {nChars = 13288, line = 312, col = 3}, position = Pos {nChars = 13339, line = 312, col = 54}}),(Fwd (Range {anchor = Pos {nChars = 13289, line = 312, col = 4}, position = Pos {nChars = 13300, line = 312, col = 15}}),"ascii.alpha"),ClassUnion (ClassVar (Fwd (Range {anchor = Pos {nChars = 13304, line = 312, col = 19}, position = Pos {nChars = 13320, line = 312, col = 35}})) "ascii.alpha.lo") (ClassVar (Fwd (Range {anchor = Pos {nChars = 13323, line = 312, col = 38}, position = Pos {nChars = 13339, line = 312, col = 54}})) "ascii.alpha.hi")),(Fwd (Range {anchor = Pos {nChars = 13342, line = 313, col = 3}, position = Pos {nChars = 13369, line = 313, col = 30}}),(Fwd (Range {anchor = Pos {nChars = 13343, line = 313, col = 4}, position = Pos {nChars = 13357, line = 313, col = 18}}),"ascii.alpha.lo"),ClassRange (Fwd (Range {anchor = Pos {nChars = 13361, line = 313, col = 22}, position = Pos {nChars = 13369, line = 313, col = 30}})) 'a' 'z'),(Fwd (Range {anchor = Pos {nChars = 13372, line = 314, col = 3}, position = Pos {nChars = 13399, line = 314, col = 30}}),(Fwd (Range {anchor = Pos {nChars = 13373, line = 314, col = 4}, position = Pos {nChars = 13387, line = 314, col = 18}}),"ascii.alpha.hi"),ClassRange (Fwd (Range {anchor = Pos {nChars = 13391, line = 314, col = 22}, position = Pos {nChars = 13399, line = 314, col = 30}})) 'A' 'Z'),(Fwd (Range {anchor = Pos {nChars = 13402, line = 315, col = 3}, position = Pos {nChars = 13445, line = 315, col = 46}}),(Fwd (Range {anchor = Pos {nChars = 13403, line = 315, col = 4}, position = Pos {nChars = 13418, line = 315, col = 19}}),"ascii.alpha-num"),ClassUnion (ClassVar (Fwd (Range {anchor = Pos {nChars = 13422, line = 315, col = 23}, position = Pos {nChars = 13435, line = 315, col = 36}})) "ascii.alpha") (ClassVar (Fwd (Range {anchor = Pos {nChars = 13438, line = 315, col = 39}, position = Pos {nChars = 13445, line = 315, col = 46}})) "digit"))]}

------ Cleanup ------

pattern Kw :: String -> Texpr
pattern Kw str <- Atom _ str

clean :: Texprs -> Texprs
clean ts = cleanKeywords <$> concatMap cleanSpace ts

cleanSpace :: Texpr -> Texprs
cleanSpace t@(Atom _ _) = [t]
cleanSpace (Combo l name ts)
  | name `elem` ["space", "nl", "comment", "doc", "bird-foot"] = []
  | otherwise = [Combo l name (concatMap cleanSpace ts)]

cleanKeywords :: Texpr -> Texpr
cleanKeywords t@(Atom _ _) = t
cleanKeywords (Combo l "rule-sat" ((cleanKeywords <$>) -> ts))
  | (Kw "[^" : (unsnoc -> Just (ts', Kw "]"))) <- ts
  = Combo l "rule-sat.neg" ts'
cleanKeywords (Combo l ctor ((cleanKeywords <$>) -> ts0)) = Combo l ctor (go ctor ts0)
  where
  go "def-rule" (name : Kw "=" : rest) = name : rest
  go "rule-parametric" (f : Kw "<" : (unsnoc -> Just (ts, Kw ">"))) = f : concatMap cleanComma ts
  go "rule-ctor" (name : Kw ":" : rest) = name:rest
  go "rep-custom" [Kw "{", lo, comma@(Kw ","), hi, Kw "}"] = [lo, comma, hi]
  go "rep-custom" [Kw "{", comma@(Kw ","), hi, Kw "}"] = [comma, hi]
  go "rep-custom" [Kw "{", lo, comma@(Kw ","), Kw "}"] = [lo, comma]
  go "rep-custom" (Kw "{" : (unsnoc -> Just (ts, Kw "}"))) = ts
  go "rule-commit" [Kw "(", t1, Kw "->", t2, Kw ")"] = [t1, t2]
  go "rule-group" (Kw "(" : (unsnoc -> Just (ts, Kw ")"))) = ts
  go "rule-flat" (Kw "/" : (unsnoc -> Just (ts, Kw "/"))) = ts
  go "rule-call" (f : Kw "<" : (unsnoc -> Just (ts, Kw ">"))) = f : concatMap cleanComma ts
  go "rule-char" [Kw "\'", c, Kw "\'"] = [c]
  go "rule-string" (Kw "\"" : (unsnoc -> Just (ts, Kw "\""))) = ts
  go "rule-sat" (Kw "[" : (unsnoc -> Just (ts, Kw "]"))) = ts
  go "rule-end" [Kw "$"] = []
  go "rule-void" (Kw "0" : Kw ":" : Kw "\"" : (unsnoc -> Just (ts, Kw "\""))) = ts
  go "rule-capture" [Kw "@", name, Kw "=", capture, scope] = [name, capture, scope]
  go "sat-range" [Kw "\'", lo, Kw "\'", Kw "..", Kw "\'", hi, Kw "\'"] = [lo, hi]
  go "sat-char" [Kw "\'", c, Kw "\'"] = [c]
  go "sat-var" [Kw ":", name, Kw ":"] = [name]
  go "def-class" (Kw ":":name:Kw ":":Kw "=":body) = (name : body)
  go "class-var" [Kw ":", name, Kw ":"] = [name]
  go "class-set" (Kw "\"" : (unsnoc -> Just (ts, Kw "\""))) = ts
  go "class-range" [Kw "\'", lo, Kw "\'", Kw "..", Kw "\'", hi, Kw "\'"] = [lo, hi]
  go "class-char" [Kw "\'", c, Kw "\'"] = [c]
  go _ other = other

cleanComma :: Texpr -> Texprs
cleanComma (Kw ",") = []
cleanComma t = [t]

unsnoc :: [a] -> Maybe ([a], a)
unsnoc xs = do
  (x,xs') <- uncons (reverse xs)
  pure (reverse xs', x)

parsePeg :: Texprs -> Peg
parsePeg ts0 =
  let (classes, ts1) = parseClasses ts0
      (rules, ts2) = parseRules ts1
      start = parseStartDef ts2
   in Peg {start, rules, classes}

------ Start ------

type StartDef = Maybe (FwdRange, String)

parseStartDef :: Texprs -> StartDef
parseStartDef [] = Nothing
parseStartDef [t] = Just $ go t
  where
  go (Combo l "def-start" [Atom _ name]) = (l, name)
  go _ = error "internal Peg grammar error"
parseStartDef _ = error "internal Peg grammar error"

------ Rules ------

type RuleDef = (FwdRange, (FwdRange, String, [String]), Rule)

parseRules :: Texprs -> ([RuleDef], Texprs)
parseRules defs =
  let (rs, defs') = partition isRuleDef defs
      rs' = parseRuleDef <$> rs
   in (rs', defs')
  where
  isRuleDef (Combo _ "def-rule" _) = True
  isRuleDef _ = False

parseRuleDef :: Texpr -> RuleDef
parseRuleDef (Combo l "def-rule" [binder,body]) = (l, parseRuleBinder binder, parseRule body)
parseRuleDef _ = error "internal Peg grammar error"

parseRuleBinder :: Texpr -> (FwdRange, String, [String])
parseRuleBinder (Atom l str) = (l, str, [])
parseRuleBinder (Combo l "rule-parametric" (f:params)) =
  (l, fromName f, fromName <$> params)
  where
  fromName (Atom _ str) = str
  fromName _  = error "internal Peg grammar error"
parseRuleBinder _ = error "internal Peg grammar error"

parseRule :: Texpr -> Rule
parseRule (Combo l "rule-alt" ts) = Alt l $ loop ts
  where
  loop [t] = [parseRule t]
  loop (a:Kw "|":rest) = parseRule a : loop rest
  loop _ = error "internal Peg grammar error"
parseRule (Combo _ "rule-ctor" [Atom l ctor, g]) = Ctor l ctor $ parseRule g
parseRule (Combo l "rule-seq" ts) = Seq l $ parseRule <$> ts
parseRule (Combo l "rule-capture" [(Atom _ name), capture, scope])
    = Cap l name (parseRule capture) (parseRule scope)
parseRule (Combo l "rule-rep" [g, amt]) = Rep l (parseRule g) (parseAmount amt)
  where
  parseAmount :: Texpr -> (Int, Maybe Int)
  parseAmount (Kw "*") = (0, Nothing)
  parseAmount (Kw "+") = (1, Nothing)
  parseAmount (Kw "?") = (0, Just 1)
  parseAmount (Combo _ "rep-custom" [Kw ","]) = (0, Nothing)
  parseAmount (Combo _ "rep-custom" [t]) = (parseInt t, Just $ parseInt t)
  parseAmount (Combo _ "rep-custom" [t,Kw ","]) = (parseInt t, Nothing)
  parseAmount (Combo _ "rep-custom" [Kw ",", t]) = (0, Just $ parseInt t)
  parseAmount (Combo _ "rep-custom" [t1, Kw ",", t2]) = (parseInt t1, Just $ parseInt t2)
  parseAmount _ = error "internal Peg grammar error"
  parseInt :: Texpr -> Int
  parseInt (Atom _ n) = read n
  parseInt _ = error "internal Peg grammar error"
parseRule (Combo _ "rule-group" [g]) = parseRule g
parseRule (Combo l "rule-flat" [g]) = Flat l $ parseRule g
parseRule (Combo l "rule-call" (Atom _ f : args)) = Call l f (parseRule <$> args)
parseRule (Combo l "rule-char" [c]) = Char l $ parseChar c
parseRule (Combo l "rule-string" ts) = Str l $ concatMap parseStr ts
parseRule (Combo l "rule-sat" ts) = Sat l $ parseSatClass <$> ts
parseRule (Combo l "rule-sat.neg" ts) = SatNeg l $ parseSatClass <$> ts
parseRule (Combo l "rule-end" []) = End l
parseRule (Combo l "rule-void" [Atom _ msg]) = Void l msg
parseRule _ = error "internal Peg grammar error"

parseSatClass :: Texpr -> SatClass
parseSatClass = \case
  Combo l "sat-char" [c] -> SatChar l (parseChar c)
  Combo l "sat-range" [lo, hi] -> SatRange l (parseChar lo) (parseChar hi)
  Combo l "sat-var" [Atom _ name] -> SatVar l name
  Atom l cs -> SatSet l cs
  _ -> error "internal Peg grammar error"

------ Character Classes ------

type ClassDef = (FwdRange, (FwdRange, String), CharClass)

parseClasses :: Texprs -> ([ClassDef], Texprs)
parseClasses defs =
  let (clss, defs') = partition isClassDef defs
      clss' = parseClass <$> clss
   in (clss', defs')
  where
  isClassDef (Combo _ "def-class" _) = True
  isClassDef _ = False

parseClass :: Texpr -> (FwdRange, (FwdRange, String), CharClass)
parseClass (Combo l "def-class" (Atom xLoc x:body)) =
  (l, (xLoc, x), parseClassBody body)
parseClass _ = error "internal Peg grammar error"

parseClassBody :: Texprs -> CharClass
parseClassBody = loop . reverse
  where
  loop = \case
    [t] -> parseClassTerm t
    (b:o:prior) -> (parseOper o) (loop prior) (parseClassTerm b)
    _ -> error "internal Peg grammar error"
  parseOper (Kw "|") = ClassUnion
  parseOper (Kw "-") = ClassMinus
  parseOper _ = error "internal Peg grammar error"

parseClassTerm :: Texpr -> CharClass
parseClassTerm t = case t of
  Combo l "class-var" [Atom _ name] -> ClassVar l name
  Combo l "class-char" [c] -> ClassChar l (parseChar c)
  Combo l "class-range" [lo, hi] -> ClassRange l (parseChar lo) (parseChar hi)
  Combo l "class-set" elems -> ClassSet l (concatMap parseStr elems)
  _ -> error "internal Peg grammar error"

------ Utility Parsers ------

parseChar :: Texpr -> Char
parseChar (Atom _ [c]) = c
parseChar (Combo _ "char-escape" [Atom _ ['\\',c]]) = case c of
  '0' -> '\NUL'
  'a' -> '\a'
  'b' -> '\b'
  'e' -> '\ESC'
  'f' -> '\f'
  'n' -> '\n'
  'r' -> '\r'
  't' -> '\t'
  'v' -> '\v'
  _ -> error "internal Peg grammar error"
parseChar (Combo _ "char-escape" [Atom _ kw, Atom _ str]) = case kw of
  "\\x" -> chr $ read ("0x" ++ str)
  "\\u" -> chr $ read ("0x" ++ str)
  "\\U" -> chr $ read ("0x" ++ str)
  "\\" -> head str
  _ -> error "internal Peg grammar error"
parseChar t = error $ "internal Peg grammar error: parseChar " ++ show t

parseStr :: Texpr -> String
parseStr (Atom _ str) = str
parseStr t@(Combo _ "char-escape" _) = [parseChar t]
parseStr _ = error "internal Peg grammar error"
